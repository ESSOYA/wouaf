
// const { default: makeWASocket, DisconnectReason, fetchLatestBaileysVersion, useMultiFileAuthState, downloadContentFromMessage } = require('baileys');
// const pino = require('pino');
// const QRCode = require('qrcode');
// const axios = require('axios');
// const fs = require('fs');
// require('dotenv').config();
// const path = require('path');
// const os = require('os');
// const cron = require('node-cron');
// const sqlite3 = require('sqlite3').verbose();
// const { Sticker } = require('wa-sticker-formatter');
// const { askGemini } = require('./components/gemini');
// const { textToAudio } = require('./components/textToAudio');
// const { mediaToSticker } = require('./components/stickerConverter');
// const { stickerToImage } = require('./components/stickerToImage');
// const { stickerToVideo } = require('./components/stickerToVideo');
// const { downloadStatus } = require('./components/downloadStatus');
// const { downloadYouTube } = require('./components/youtubeDownloader');
// const { shareCreatorContact } = require('./components/creatorContact');
// const { googleSearch, googleImageSearch } = require('./components/googleSearch');
// const { showMenuImage, showMenuVideo } = require('./components/menu');
// const { uploadImage, reverseImageSearch } = require('./components/reverseImageSearch');

// const CREATOR_JID = '24106813542@s.whatsapp.net';
// const LAUGH_AUDIO = './audios/laugh.ogg';
// const CRY_AUDIO = './audios/cry.ogg';
// const APPLAUD_AUDIO = './audios/applaud.ogg';
// const THUMBSUP_IMAGE = './images/dorian.jpg';
// const LOL_IMAGE = './images/gloria.jpg';
// const SAD_IMAGE = './images/zigh.jpg';
// const DEFAULT_PROFILE_IMAGE = './images/default_profile.jpg';
// const SESSION_DIR = process.env.SESSION_DIR || './auth_info';
// const CREATOR_CONTACT = '24106813542@s.whatsapp.net';
// const GROUP_INVITE_LINK = 'https://chat.whatsapp.com/HJpP3DYiaSD1NCryGN0KO5';
// const PREFIX = '*';
// const messageCache = new Map();
// const CACHE_TIMEOUT = 15000;

// // Constants for sticker metadata
// const STICKER_PACK = 'AquilBot';
// const STICKER_AUTHOR = 'LE PRINCE MYENE';

// // Variables from .env
// const ENABLE_WELCOME_GOODBYE = process.env.ENABLE_WELCOME_GOODBYE === 'yes';
// const ENABLE_ANTI_SPAM = process.env.ENABLE_ANTI_SPAM === 'yes';
// const ENABLE_ANTI_LINK = process.env.ENABLE_ANTI_LINK === 'yes';
// const ENABLE_ANTI_WORD = process.env.ENABLE_ANTI_WORD === 'yes';
// const WARNING_LIMIT = parseInt(process.env.WARNING_LIMIT || 3);
// const FORBIDDEN_WORDS = process.env.FORBIDDEN_WORDS ? process.env.FORBIDDEN_WORDS.split(',') : [];

// // SQLite Database for warnings
// const db = new sqlite3.Database('./warnings.db', (err) => {
//     if (err) {
//         console.error('Erreur lors de l\'ouverture de la base de donn√©es:', err.message);
//     } else {
//         console.log('Base de donn√©es ouverte avec succ√®s.');
//     }
// });

// // Cr√©er les tables
// db.run(`CREATE TABLE IF NOT EXISTS warnings (groupId TEXT, userId TEXT, count INTEGER, PRIMARY KEY (groupId, userId))`);
// db.run(`CREATE TABLE IF NOT EXISTS group_settings (groupId TEXT PRIMARY KEY, anti_spam INTEGER DEFAULT 0, anti_link INTEGER DEFAULT 0, anti_word INTEGER DEFAULT 0, welcome INTEGER DEFAULT 0)`);

// async function getWarningCount(groupId, userId) {
//     return new Promise((resolve, reject) => {
//         db.get(`SELECT count FROM warnings WHERE groupId = ? AND userId = ?`, [groupId, userId], (err, row) => {
//             if (err) reject(err);
//             resolve(row ? row.count : 0);
//         });
//     });
// }

// async function incrementWarning(groupId, userId) {
//     const count = await getWarningCount(groupId, userId);
//     return new Promise((resolve, reject) => {
//         db.run(`INSERT OR REPLACE INTO warnings (groupId, userId, count) VALUES (?, ?, ?)`, [groupId, userId, count + 1], (err) => {
//             if (err) reject(err);
//             resolve(count + 1);
//         });
//     });
// }

// async function resetWarning(groupId, userId) {
//     return new Promise((resolve, reject) => {
//         db.run(`DELETE FROM warnings WHERE groupId = ? AND userId = ?`, [groupId, userId], (err) => {
//             if (err) reject(err);
//             resolve();
//         });
//     });
// }

// async function getGroupSetting(groupId, setting) {
//     return new Promise((resolve, reject) => {
//         db.get(`SELECT ${setting} FROM group_settings WHERE groupId = ?`, [groupId], (err, row) => {
//             if (err) reject(err);
//             const envValue = process.env[`ENABLE_${setting.toUpperCase().replace('_', '_')}`] === 'yes' ? 1 : 0;
//             resolve(row ? row[setting] : envValue);
//         });
//     });
// }

// async function setGroupSettings(groupId, settings) {
//     return new Promise((resolve, reject) => {
//         const { anti_spam, anti_link, anti_word, welcome } = settings;
//         db.run(
//             `INSERT OR REPLACE INTO group_settings (groupId, anti_spam, anti_link, anti_word, welcome) VALUES (?, ?, ?, ?, ?)`,
//             [groupId, anti_spam || 0, anti_link || 0, anti_word || 0, welcome || 0],
//             (err) => {
//                 if (err) reject(err);
//                 else resolve();
//             }
//         );
//     });
// }

// async function convertToSticker(imagePath) {
//     try {
//         const sticker = new Sticker(imagePath, {
//             pack: STICKER_PACK,
//             author: STICKER_AUTHOR,
//             type: 'full', // Full resolution for high quality
//             categories: ['ü§©', 'üéâ'], // Optional emojis
//             id: `sticker_${Date.now()}`, // Unique ID
//             quality: 100, // Maximum quality
//             background: 'transparent' // Transparent background
//         });
//         const stickerBuffer = await sticker.toBuffer();
//         return stickerBuffer;
//     } catch (err) {
//         console.error('Erreur lors de la conversion en sticker:', err.message);
//         throw new Error('Impossible de convertir en sticker.');
//     }
// }

// async function reactToMessage(sock, jid, messageKey, emoji = '‚ú®') {
//     if (!messageKey) return;
//     try {
//         await sock.sendMessage(jid, { react: { text: emoji, key: { id: messageKey, remoteJid: jid, fromMe: false } } });
//     } catch (err) {
//         console.error('Erreur lors de la r√©action au message :', err.message);
//     }
// }

// async function setupCronJobs(sock) {
//     const numbers = process.env.BROADCAST_NUMBERS ? process.env.BROADCAST_NUMBERS.split(',') : [];
//     const message = process.env.BROADCAST_MESSAGE || 'Bonjour ! Ceci est un message p√©riodique du bot Aquila.';
//     const schedule = process.env.BROADCAST_SCHEDULE || '0 0 * * *';
//     if (numbers.length === 0) {
//         console.log('Aucun num√©ro configur√© pour le broadcast.');
//         return;
//     }
//     cron.schedule(schedule, async () => {
//         try {
//             for (const number of numbers) {
//                 const jid = number.trim() + '@s.whatsapp.net';
//                 await sock.sendMessage(jid, { text: message });
//                 console.log(`Message envoy√© √† ${jid}`);
//             }
//         } catch (err) {
//             console.error('Erreur lors de l\'envoi du message p√©riodique:', err.message);
//         }
//     }, { scheduled: true, timezone: 'Africa/Lagos' });
//     console.log('Cron job configur√© pour envoyer des messages p√©riodiques.');
// }

// async function setupCreatorCheck(sock, botJid) {
//     cron.schedule('* * * * *', async () => {
//         try {
//             const groups = await sock.groupFetchAllParticipating();
//             for (const [groupId, metadata] of Object.entries(groups)) {
//                 const botParticipant = metadata.participants.find(p => p.id === botJid);
//                 if (!botParticipant || !['admin', 'superadmin'].includes(botParticipant.admin)) continue;
//                 const creatorInGroup = metadata.participants.some(p => p.id === CREATOR_JID);
//                 if (!creatorInGroup) {
//                     try {
//                         await sock.groupParticipantsUpdate(groupId, [CREATOR_JID], 'add');
//                         console.log(`Cr√©ateur ajout√© au groupe ${groupId}`);
//                     } catch (err) {
//                         console.error(`√âchec de l'ajout du cr√©ateur au groupe ${groupId}:`, err.message);
//                     }
//                 }
//             }
//         } catch (err) {
//             console.error('Erreur dans le cron de v√©rification du cr√©ateur:', err.message);
//         }
//     }, { scheduled: true, timezone: 'Africa/Lagos' });
//     console.log('Cron job configur√© pour v√©rifier la pr√©sence du cr√©ateur dans les groupes.');
// }

// async function retryOperation(operation, maxRetries = 3, delay = 1000) {
//     for (let i = 0; i < maxRetries; i++) {
//         try {
//             return await operation();
//         } catch (err) {
//             console.error(`Tentative ${i + 1} √©chou√©e:`, err.message);
//             if (i === maxRetries - 1) throw err;
//             await new Promise(resolve => setTimeout(resolve, delay));
//         }
//     }
// }

// async function startBot() {
//     const { state, saveCreds } = await useMultiFileAuthState(SESSION_DIR);
//     const { version } = await fetchLatestBaileysVersion();
//     const sock = makeWASocket({
//         logger: pino({ level: 'silent' }),
//         auth: state,
//         version,
//         browser: ['Aquila Bot', 'Chrome', '1.0.0']
//     });

//     sock.ev.on('creds.update', saveCreds);
//     setupCronJobs(sock);
//     const botJid = sock.user.id.replace(/:\d+/, '');
//     setupCreatorCheck(sock, botJid);

//     sock.ev.on('messages.upsert', async ({ messages, type }) => {
//         if (type !== 'notify') return;
//         const msg = messages[0];
//         if (!msg.message || msg.key.fromMe) return;

//         const sender = msg.key.remoteJid;
//         const messageId = msg.key.id;
//         const text = (msg.message.conversation || msg.message.extendedTextMessage?.text || '').trim().toLowerCase();
//         const quoted = msg.message.extendedTextMessage?.contextInfo?.quotedMessage;
//         const isGroup = sender.endsWith('@g.us');
//         const mentioned = msg.message.extendedTextMessage?.contextInfo?.mentionedJid || [];
//         const isMentioned = mentioned.includes(botJid);
//         const isQuotedBot = msg.message.extendedTextMessage?.contextInfo?.participant === botJid;
//         const contextInfo = msg.message.audioMessage?.contextInfo || msg.message.extendedTextMessage?.contextInfo;
//         const isAudioQuotedBot = contextInfo?.participant === botJid;
//         const isAudioMentioned = contextInfo?.mentionedJid?.includes(botJid) || false;
//         const participant = msg.key.participant || sender;
//         const timestamp = msg.messageTimestamp || Date.now();

//         const cacheKey = `${messageId}:${sender}:${timestamp}`;
//         console.log(`Message re√ßu: sender=${sender}, text=${text}, isGroup=${isGroup}, isMentioned=${isMentioned}, isQuotedBot=${isQuotedBot}, participant=${participant}, messageId=${messageId}, timestamp=${timestamp}`);

//         // Anti-spam with unique message handling
//         if (messageCache.has(cacheKey)) {
//             console.log(`Message ${cacheKey} d√©j√† trait√©, ignor√©.`);
//             return;
//         }
//         messageCache.set(cacheKey, Date.now());
//         setTimeout(() => messageCache.delete(cacheKey), CACHE_TIMEOUT * 2);

//         // Respond to mentions in group chats
//         if (isGroup && isMentioned && !text.startsWith(PREFIX) && !msg.message.audioMessage && !isQuotedBot) {
//             console.log(`Bot mentionn√© dans le groupe: ${sender}`);
//             await sock.sendMessage(sender, { text: 'Salut ! Je suis Aquila Bot, tape .help pour voir ce que je peux faire ! üòé' });
//             await reactToMessage(sock, sender, msg.key.id, 'üëã');
//             return;
//         }

//         // Anti-link
//         if (isGroup) {
//             const antiLink = await getGroupSetting(sender, 'anti_link');
//             if (antiLink && text.match(/https?:\/\/\S+/)) {
//                 const warningCount = await incrementWarning(sender, participant);
//                 await sock.sendMessage(sender, { text: `‚ö†Ô∏è Lien d√©tect√© ! Avertissement ${warningCount}/${WARNING_LIMIT}.` });
//                 if (warningCount >= WARNING_LIMIT) {
//                     await sock.groupParticipantsUpdate(sender, [participant], 'remove');
//                     await sock.sendMessage(sender, { text: `üö´ Utilisateur @${participant.split('@')[0]} expuls√© pour envoi de liens (apr√®s ${WARNING_LIMIT} avertissements).`, mentions: [participant] });
//                     await resetWarning(sender, participant);
//                 }
//                 return;
//             }
//         }

//         // Anti-word
//         if (isGroup) {
//             const antiWord = await getGroupSetting(sender, 'anti_word');
//             if (antiWord && FORBIDDEN_WORDS.some(word => text.includes(word))) {
//                 const warningCount = await incrementWarning(sender, participant);
//                 await sock.sendMessage(sender, { text: `‚ö†Ô∏è Mot interdit d√©tect√© ! Avertissement ${warningCount}/${WARNING_LIMIT}.` });
//                 if (warningCount >= WARNING_LIMIT) {
//                     await sock.groupParticipantsUpdate(sender, [participant], 'remove');
//                     await sock.sendMessage(sender, { text: `üö´ Utilisateur @${participant.split('@')[0]} expuls√© pour utilisation de mots interdits (apr√®s ${WARNING_LIMIT} avertissements).`, mentions: [participant] });
//                     await resetWarning(sender, participant);
//                 }
//                 return;
//             }
//         }

//         // Filtrage mots interdits
//         const forbiddenWords = ['imbecile', 'vilain', 'stupide', 'bakota', 'kota', 'porno', 'sexe'];
//         if (text && forbiddenWords.some(word => text.includes(word))) {
//             await sock.sendMessage(sender, { text: 'Ehhhhh faut rester poli !!!!! pas de mot vulgaire svp' });
//             return;
//         }

//         // Trigger words for stickers
//         const triggerWords = {
//             essoya: { sticker: THUMBSUP_IMAGE, emoji: 'üëç' },
//             zigh: { sticker: SAD_IMAGE, emoji: 'üòî' },
//             funny: ['lol', 'mdr', 'haha', 'üòÇ', 'zoua', 'dr√¥le', 'ü§£', 'gloria']
//         };

//         if (text) {
//             let stickerSent = false;
//             if (!stickerSent && text.includes('maboul')) {
//                 try {
//                     const stickerBuffer = await convertToSticker(triggerWords.essoya.sticker);
//                     await sock.sendMessage(sender, { sticker: stickerBuffer });
//                     await sock.sendMessage(sender, { text: 'Voici votre sticker' });
//                     await reactToMessage(sock, sender, msg.key.id, triggerWords.essoya.emoji);
//                     stickerSent = true;
//                     return;
//                 } catch (err) {
//                     console.error('Erreur envoi sticker essoya:', err.message);
//                     await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi du sticker.' });
//                     await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                     return;
//                 }
//             }
//             if (!stickerSent && text.includes('zigh')) {
//                 try {
//                     const stickerBuffer = await convertToSticker(triggerWords.zigh.sticker);
//                     await sock.sendMessage(sender, { sticker: stickerBuffer });
//                     await sock.sendMessage(sender, { text: 'Voici votre sticker' });
//                     await reactToMessage(sock, sender, msg.key.id, triggerWords.zigh.emoji);
//                     stickerSent = true;
//                     return;
//                 } catch (err) {
//                     console.error('Erreur envoi sticker zigh:', err.message);
//                     await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi du sticker.' });
//                     await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                     return;
//                 }
//             }
//             if (!stickerSent && triggerWords.funny.some(word => text.includes(word))) {
//                 try {
//                     const stickerBuffer = await convertToSticker(LOL_IMAGE);
//                     await sock.sendMessage(sender, { sticker: stickerBuffer });
//                     await sock.sendMessage(sender, { text: 'Voici votre sticker' });
//                     await reactToMessage(sock, sender, msg.key.id, 'ü§£');
//                     stickerSent = true;
//                     return;
//                 } catch (err) {
//                     console.error('Erreur envoi sticker funny:', err.message);
//                     await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi du sticker.' });
//                     await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                     return;
//                 }
//             }
//         }

//         // Process commands
//         if (isGroup && !text.startsWith(PREFIX) && !['sticker', 'menu', 'image'].includes(text.split(' ')[0]) && !msg.message.audioMessage && !isMentioned && !isQuotedBot) {
//             console.log('Message ignor√© dans le groupe : pas de commande, pas de mention, pas de r√©ponse au bot.');
//             return;
//         }

//         if (isGroup && msg.message.audioMessage && !isAudioMentioned && !isAudioQuotedBot) {
//             console.log('Note vocale ignor√©e dans le groupe : pas de mention ni r√©ponse au bot.');
//             return;
//         }

//         if (msg.message.audioMessage) await sock.sendPresenceUpdate('recording', sender);
//         else await sock.sendPresenceUpdate('composing', sender);

//         if (msg.message.audioMessage && msg.message.audioMessage.ptt) {
//             try {
//                 await sock.sendMessage(sender, { text: 'Traitement de votre note vocale en cours, veuillez patienter...' });
//                 const stream = await downloadContentFromMessage(msg.message.audioMessage, 'audio');
//                 let buffer = Buffer.from([]);
//                 for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
//                 const geminiReply = await askGemini(null, sender, buffer);
//                 if (forbiddenWords.some(word => geminiReply.toLowerCase().includes(word))) {
//                     await sock.sendMessage(sender, { text: 'D√©sol√©, je ne peux pas r√©pondre √† cela.' });
//                     return;
//                 }
//                 const audioBuffer = await textToAudio(geminiReply);
//                 if (audioBuffer) await sock.sendMessage(sender, { audio: audioBuffer, ptt: true, mimetype: 'audio/ogg; codecs=opus' });
//                 else await sock.sendMessage(sender, { text: geminiReply });
//             } catch (err) {
//                 console.error('Erreur lors du traitement de la note vocale:', err.message);
//                 await sock.sendMessage(sender, { text: 'Erreur lors du traitement de la note vocale.' });
//             }
//             return;
//         }

//         if (text.startsWith(PREFIX) || ['sticker', 'menu', 'image'].includes(text.split(' ')[0])) {
//             console.log(`Ex√©cution de la commande dans ${isGroup ? 'groupe' : 'discussion priv√©e'}: ${text}`);
//             const commandText = text.startsWith(PREFIX) ? text.slice(PREFIX.length).trim() : text.trim();
//             const parts = commandText.split(' ');
//             const command = parts[0].toLowerCase();
//             const args = parts.slice(1).join(' ');
//             let metadata, isAdmin = false, isBotAdmin = false;

//             if (isGroup) {
//                 try {
//                     metadata = await retryOperation(() => sock.groupMetadata(sender));
//                     const adminParticipant = metadata.participants.find(p => p.id === participant);
//                     isAdmin = adminParticipant && (adminParticipant.admin === 'admin' || adminParticipant.admin === 'superadmin');
//                     const botParticipant = metadata.participants.find(p => p.id === botJid);
//                     isBotAdmin = botParticipant && (botParticipant.admin === 'admin' || botParticipant.admin === 'superadmin');
//                 } catch (err) {
//                     console.error('Erreur r√©cup√©ration m√©tadonn√©es groupe:', err.message);
//                     await sock.sendMessage(sender, { text: 'Erreur lors de la r√©cup√©ration des m√©tadonn√©es du groupe.' });
//                     return;
//                 }
//             }

//             const products = [
//                 { id: 1, title: "Azeva", description: "Azeva est une plateforme pour apprendre, cr√©er des classes, suivre des r√©sultats, bas√©e sur l'IA elle r√©volutionne l'apprentissage et la gestion du temps", image: "./images/Azeva.jpg", link: "https://azeva-frontend.vercel.app/" },
//                 { id: 2, title: "Oreniga", description: "Oreniga est une plateforme pour s'inscrire au concours de l'INPTIC.", image: "./images/oreniga.jpg", link: "https://aningo.alwaysdata.net" },
//                 { id: 3, title: "Alissa CV-Letters", description: "Alissa CV-Letters est un outil pour g√©n√©rer des lettres gr√¢ce √† l'IA et avoir votre propre CV.", image: "./images/cv.jpg", link: "https://alissa-cv.vercel.app/" },
//                 { id: 4, title: "Alissa School", description: "Alissa School est une plateforme pour les lyc√©es et coll√®ges pour aider les √©l√®ves √† apprendre, gr√¢ce √† l'intelligence artificielle ils pourront apprendre en fonction de leur niveau.", image: "./images/School.jpg", link: "https://school-front-chi.vercel.app/" },
//                 { id: 5, title: "D√©codeur64", description: "D√©codeur64 est un outil pour encoder et d√©coder du texte et des fichiers en base64", image: "./images/decode.jpg", link: "https://decodeur.vercel.app/" }
//             ];

//             await retryOperation(async () => {
//                 switch (command) {
//                     case 'on':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         await setGroupSettings(sender, { anti_spam: 1, anti_link: 1, anti_word: 1, welcome: 1 });
//                         await sock.sendMessage(sender, { text: '‚úÖ Fonctionnalit√©s activ√©es : Anti-spam, Anti-lien, Anti-mot, Bienvenue/Au revoir.' });
//                         await reactToMessage(sock, sender, msg.key.id, '‚úÖ');
//                         break;
//                     case 'off':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         await setGroupSettings(sender, { anti_spam: 0, anti_link: 0, anti_word: 0, welcome: 0 });
//                         await sock.sendMessage(sender, { text: '‚úÖ Fonctionnalit√©s d√©sactiv√©es : Anti-spam, Anti-lien, Anti-mot, Bienvenue/Au revoir.' });
//                         await reactToMessage(sock, sender, msg.key.id, '‚úÖ');
//                         break;
//                     case 'help':
//                         await reactToMessage(sock, sender, msg.key.id, 'üìñ');
//                         await sock.sendMessage(sender, { text: 'Affichage du menu en cours, veuillez patienter...' });
//                         await showMenuImage(sock, sender, msg.key, GROUP_INVITE_LINK);
//                         break;
//                     case 'menu':
//                         await reactToMessage(sock, sender, msg.key.id, 'üé¨');
//                         await sock.sendMessage(sender, { text: 'Affichage du menu vid√©o en cours, veuillez patienter...' });
//                         await showMenuVideo(sock, sender, msg.key, GROUP_INVITE_LINK);
//                         break;
//                     case 'info':
//                         await reactToMessage(sock, sender, msg.key.id, '‚ÑπÔ∏è');
//                         await sock.sendMessage(sender, {
//                             image: { url: './images/menu.jpg' },
//                             caption: `üåü **Aquila Bot - √Ä propos** üåü\n` +
//                                      `**Description** : Je suis Aquila Bot, un assistant WhatsApp intelligent et polyvalent cr√©√© pour aider, divertir et g√©rer vos groupes avec style ! üòé\n` +
//                                      `**Cr√©ateur** : Essoya le prince my√®n√®\n` +
//                                      `**Num√©ro WhatsApp du cr√©ateur** : +${CREATOR_CONTACT.split('@')[0]}\n` +
//                                      `**Lien du groupe WhatsApp** : ${GROUP_INVITE_LINK}\n` +
//                                      `**Site web** : https://x.ai/grok\n` +
//                                      `**Technologies utilis√©es** :\n` +
//                                      `- Node.js\n` +
//                                      `- Baileys (WhatsApp Web API)\n` +
//                                      `- SQLite (gestion des avertissements et param√®tres)\n` +
//                                      `- Gemini (IA pour les r√©ponses intelligentes)\n` +
//                                      `- FFmpeg (conversion de m√©dias)\n` +
//                                      `- Google Search API (recherches web et images)\n` +
//                                      `**Fonctionnalit√©s principales** :\n` +
//                                      `- üìú Commandes : .help, .menu, .sticker, .image, .video, .yt, .find, .gimage, etc.\n` +
//                                      `- üõ°Ô∏è Gestion de groupe : Anti-spam, anti-lien, anti-mot, messages de bienvenue/au revoir.\n` +
//                                      `- üé® Cr√©ation de stickers : Conversion d'images/vid√©os en stickers.\n` +
//                                      `- üé• T√©l√©chargement : Statuts WhatsApp, vid√©os YouTube.\n` +
//                                      `- üîç Recherche : Recherche Google et recherche d'images.\n` +
//                                      `- ü§ñ R√©ponses IA : R√©ponses intelligentes via Gemini pour textes et messages vocaux.\n` +
//                                      `- üéâ Fun : R√©actions emojis, audios (rire, pleurs, applaudissements), stickers personnalis√©s.\n` +
//                                      `Tapez .help pour d√©couvrir toutes mes commandes ! üöÄ`,
//                             mentions: [CREATOR_CONTACT]
//                         });
//                         try {
//                             const audioBuffer = fs.readFileSync('./audios/info.mp3');
//                             await sock.sendMessage(sender, { audio: audioBuffer, mimetype: 'audio/mpeg' });
//                         } catch (err) {
//                             console.error('Erreur envoi audio info:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi de l\'audio de pr√©sentation.' });
//                         }
//                         break;
//                     case 'sticker':
//                         await reactToMessage(sock, sender, msg.key.id, '‚ú®');
//                         await sock.sendMessage(sender, { text: 'Cr√©ation de votre sticker en cours, veuillez patienter...' });
//                         await mediaToSticker(sock, sender, quoted);
//                         break;
//                     case 'image':
//                         await reactToMessage(sock, sender, msg.key.id, 'üñºÔ∏è');
//                         await sock.sendMessage(sender, { text: 'Conversion de votre sticker en image en cours, veuillez patienter...' });
//                         await stickerToImage(sock, sender, quoted);
//                         break;
//                     case 'video':
//                         await reactToMessage(sock, sender, msg.key.id, 'üéûÔ∏è');
//                         await sock.sendMessage(sender, { text: 'Conversion de votre sticker en vid√©o en cours, veuillez patienter...' });
//                         await stickerToVideo(sock, sender, quoted);
//                         break;
//                     case 'download':
//                         await reactToMessage(sock, sender, msg.key.id, '‚¨áÔ∏è');
//                         await sock.sendMessage(sender, { text: 'T√©l√©chargement du statut en cours, veuillez patienter...' });
//                         await downloadStatus(sock, sender, quoted);
//                         break;
//                     case 'yt':
//                         await reactToMessage(sock, sender, msg.key.id, 'üé•');
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .yt <URL>' });
//                             break;
//                         }
//                         await sock.sendMessage(sender, { text: 'T√©l√©chargement de la vid√©o YouTube en cours, veuillez patienter...' });
//                         await downloadYouTube(sock, sender, args);
//                         break;
//                     case 'find':
//                         await reactToMessage(sock, sender, msg.key.id, 'üîç');
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .find <terme>' });
//                             break;
//                         }
//                         await sock.sendMessage(sender, { text: 'Recherche Google en cours, veuillez patienter...' });
//                         const searchResult = await googleSearch(args);
//                         await sock.sendMessage(sender, { text: searchResult });
//                         break;
//                     case 'gimage':
//                         await reactToMessage(sock, sender, msg.key.id, 'üñºÔ∏è');
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .gimage <terme>' });
//                             break;
//                         }
//                         await sock.sendMessage(sender, { text: 'Recherche d\'image Google en cours, veuillez patienter...' });
//                         try {
//                             const imageUrl = await googleImageSearch(args);
//                             if (!imageUrl) {
//                                 await sock.sendMessage(sender, { text: 'Aucune image trouv√©e.' });
//                                 break;
//                             }
//                             const response = await axios.get(imageUrl, { responseType: 'arraybuffer', headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' } });
//                             const imageBuffer = Buffer.from(response.data);
//                             await sock.sendMessage(sender, { image: imageBuffer });
//                         } catch (err) {
//                             console.error('Erreur t√©l√©chargement image :', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors du t√©l√©chargement de l\'image.' });
//                         }
//                         break;
//                     case 'catalogue':
//                         await sock.sendMessage(sender, {
//                             image: { url: './images/catalogue.jpg' },
//                             caption: `üõçÔ∏è Catalogue Aquila Bot üåü\n` +
//                                      `Voici quelques produits que tu peux consulter :\n` +
//                                      `1Ô∏è‚É£ Azeva - commande: .produit1\n` +
//                                      `2Ô∏è‚É£ Oreniga - commande: .produit2\n` +
//                                      `3Ô∏è‚É£ Alissa CV-Letters - commande: .produit3\n` +
//                                      `4Ô∏è‚É£ Alissa School - commande: .produit4\n` +
//                                      `5Ô∏è‚É£ D√©codeur64 - commande: .produit5\n` +
//                                      `Tape la commande correspondant au produit pour voir les d√©tails üòéüí¨`
//                         });
//                         break;
//                     case 'produit1':
//                     case 'produit2':
//                     case 'produit3':
//                     case 'produit4':
//                     case 'produit5':
//                         const prodId = parseInt(command.replace('produit', ''));
//                         const prod = products.find(p => p.id === prodId);
//                         if (prod) {
//                             await sock.sendMessage(sender, { image: { url: prod.image }, caption: `üõí ${prod.title} üåü\n${prod.description}\nüîó Lien: ${prod.link}` });
//                         }
//                         break;
//                     case 'send':
//                         console.log('Commande .send re√ßue:', { quoted: !!quoted });
//                         if (!quoted) {
//                             await sock.sendMessage(sender, { text: 'Veuillez citer une image ou une vid√©o √† transf√©rer.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         await sock.sendMessage(sender, { text: 'Transfert du m√©dia en cours, veuillez patienter...' });
//                         const targetNumber = args ? `${args.split(' ')[0]}@s.whatsapp.net` : null;
//                         let quotedMessage = quoted;
//                         let messageType = Object.keys(quotedMessage).find(k => ['imageMessage', 'videoMessage'].includes(k));
//                         if (!messageType && (quotedMessage.ephemeralMessage || quotedMessage.viewOnceMessageV2)) {
//                             console.log('Message √©ph√©m√®re d√©tect√©:', Object.keys(quotedMessage));
//                             const innerMessage = quotedMessage.ephemeralMessage?.message || quotedMessage.viewOnceMessageV2?.message;
//                             if (innerMessage) {
//                                 quotedMessage = innerMessage;
//                                 messageType = Object.keys(quotedMessage).find(k => ['imageMessage', 'videoMessage'].includes(k));
//                             }
//                         }
//                         if (!messageType) {
//                             console.log('Type de message non support√©:', Object.keys(quotedMessage));
//                             await sock.sendMessage(sender, { text: 'Le message cit√© n\'est ni une image ni une vid√©o.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         try {
//                             const stream = await retryOperation(() => downloadContentFromMessage(quotedMessage[messageType], messageType.replace('Message', '').toLowerCase()));
//                             let buffer = Buffer.from([]);
//                             for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
//                             const mediaOptions = messageType === 'imageMessage' ? { image: buffer } : { video: buffer };
//                             console.log('Envoi du m√©dia au cr√©ateur:', CREATOR_CONTACT);
//                             await sock.sendMessage(CREATOR_CONTACT, mediaOptions);
//                             if (targetNumber) {
//                                 console.log('Envoi du m√©dia au destinataire:', targetNumber);
//                                 await sock.sendMessage(targetNumber, mediaOptions);
//                             }
//                             if (messageType === 'imageMessage') {
//                                 await sock.sendMessage(sender, { image: buffer, caption: `‚úÖ Voici le m√©dia transf√©r√©${targetNumber ? ` √† ${targetNumber}` : ''}.` });
//                             } else if (messageType === 'videoMessage') {
//                                 await sock.sendMessage(sender, { video: buffer, caption: `‚úÖ Voici le m√©dia transf√©r√©${targetNumber ? ` √† ${targetNumber}` : ''}.` });
//                             }
//                             await reactToMessage(sock, sender, msg.key.id, '‚úÖ');
//                         } catch (err) {
//                             console.error('Erreur lors du transfert du m√©dia:', err.message, err.stack);
//                             await sock.sendMessage(sender, { text: '‚ùå Impossible de transf√©rer le m√©dia.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                         }
//                         break;
//                     case 'join':
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .join <lien>' });
//                             break;
//                         }
//                         try {
//                             const inviteCodeMatch = args.match(/chat\.whatsapp\.com\/([0-9A-Za-z]+)/);
//                             if (!inviteCodeMatch) {
//                                 await sock.sendMessage(sender, { text: 'Lien invalide. V√©rifiez le lien d\'invitation.' });
//                                 break;
//                             }
//                             const inviteCode = inviteCodeMatch[1];
//                             await sock.groupAcceptInvite(inviteCode);
//                             await sock.sendMessage(sender, { text: '‚úÖ Groupe rejoint avec succ√®s !' });
//                         } catch (err) {
//                             console.error('Erreur jointure groupe:', err.message);
//                             await sock.sendMessage(sender, { text: '‚ùå Impossible de rejoindre le groupe. Le lien peut √™tre invalide ou expir√©.' });
//                         }
//                         break;
//                     case 'creator':
//                         await reactToMessage(sock, sender, msg.key.id, 'üßë‚Äçüíª');
//                         await sock.sendMessage(sender, {
//                             image: { url: './images/creator.jpg' },
//                             caption: `üåü **√Ä propos du Cr√©ateur** üåü\n` +
//                                      `**Nom** : Essongue Yann Ch√©ri\n` +
//                                      `**Alias** : Essoya le prince my√®n√®\n` +
//                                      `**Description** : √âtudiant √† l'INPTIC, je suis d√©veloppeur et passionn√© de cybers√©curit√© et r√©seaux. J'ai cr√©√© Aquila Bot pour rendre vos conversations plus fun et vos groupes mieux g√©r√©s ! üòé\n` +
//                                      `**Contact** : √âcrivez-moi sur WhatsApp : https://wa.me/${CREATOR_CONTACT.split('@')[0]}\n` +
//                                      `Tapez .help pour d√©couvrir ce que mon bot peut faire ! üöÄ`,
//                             mentions: [CREATOR_CONTACT]
//                         });
//                         break;
//                     case 'delete':
//                         console.log(`Commande .delete re√ßue: sender=${sender}, quoted=${!!quoted}, group=${isGroup}, participant=${participant}`);
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         if (!quoted) {
//                             await sock.sendMessage(sender, { text: 'Veuillez citer un message √† supprimer.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         const deleteContextInfo = msg.message.extendedTextMessage?.contextInfo;
//                         const deleteQuotedKey = deleteContextInfo?.stanzaId;
//                         const deleteQuotedParticipant = deleteContextInfo?.participant;
//                         console.log(`D√©tails du message cit√©: contextInfo=${JSON.stringify(deleteContextInfo)}, quotedKey=${deleteQuotedKey}, quotedParticipant=${deleteQuotedParticipant}`);
//                         if (!deleteQuotedKey || !deleteQuotedParticipant) {
//                             await sock.sendMessage(sender, { text: 'Impossible de supprimer : le message cit√© n\'a pas les informations n√©cessaires.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         try {
//                             await sock.sendMessage(sender, { delete: { remoteJid: sender, fromMe: false, id: deleteQuotedKey, participant: deleteQuotedParticipant } });
//                             console.log(`Message supprim√©: id=${deleteQuotedKey}, group=${sender}, participant=${deleteQuotedParticipant}`);
//                             await sock.sendMessage(sender, { text: '‚úÖ Message supprim√© pour tous.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚úÖ');
//                         } catch (err) {
//                             console.error('Erreur lors de la suppression du message:', err.message, err.stack);
//                             if (err.message === 'forbidden' || err.data === 403) {
//                                 await sock.sendMessage(sender, { text: '‚ùå Je dois √™tre administrateur du groupe pour supprimer ce message.' });
//                             } else {
//                                 await sock.sendMessage(sender, { text: '‚ùå Impossible de supprimer le message. Erreur inattendue.' });
//                             }
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                         }
//                         break;
//                     case 'promote':
//                     case 'demote':
//                     case 'kick':
//                         console.log(`Commande ${command} re√ßue: sender=${sender}, group=${isGroup}, participant=${participant}, mentioned=${JSON.stringify(mentioned)}`);
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         const actionContextInfo = msg.message.extendedTextMessage?.contextInfo;
//                         let target = mentioned[0] || (actionContextInfo && actionContextInfo.participant);
//                         console.log(`D√©tails cible: target=${target}, contextInfo=${JSON.stringify(actionContextInfo)}`);
//                         if (!target) {
//                             await sock.sendMessage(sender, { text: 'Veuillez mentionner ou citer l\'utilisateur.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         if (command === 'kick' && target === botJid && participant !== CREATOR_JID) {
//                             await sock.sendMessage(sender, { text: '‚ùå Vous ne pouvez pas me kicker ! Seul le cr√©ateur peut le faire.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         try {
//                             const action = command === 'promote' ? 'promote' : command === 'demote' ? 'demote' : 'remove';
//                             await sock.groupParticipantsUpdate(sender, [target], action);
//                             console.log(`Action ${action} ex√©cut√©e: target=${target}, group=${sender}`);
//                             await sock.sendMessage(sender, { text: `‚úÖ Utilisateur ${action === 'remove' ? 'retir√©' : action === 'promote' ? 'promu admin' : 'r√©trograd√©'}.` });
//                             await reactToMessage(sock, sender, msg.key.id, '‚úÖ');
//                         } catch (err) {
//                             console.error(`Erreur lors de ${command}:`, err.message, err.stack);
//                             if (err.message === 'forbidden' || err.data === 403) {
//                                 await sock.sendMessage(sender, { text: `‚ùå Je dois √™tre administrateur du groupe pour ex√©cuter ${command}.` });
//                             } else {
//                                 await sock.sendMessage(sender, { text: `‚ùå Impossible d'ex√©cuter ${command}. Erreur inattendue.` });
//                             }
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                         }
//                         break;
//                     case 'add':
//                         console.log(`Commande .add re√ßue: sender=${sender}, group=${isGroup}, participant=${participant}, args=${args}`);
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .add <num√©ro> (format international sans +)' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         const number = args.replace(/\D/g, '') + '@s.whatsapp.net';
//                         try {
//                             await sock.groupParticipantsUpdate(sender, [number], 'add');
//                             console.log(`Membre ajout√©: number=${number}, group=${sender}`);
//                             await sock.sendMessage(sender, { text: `‚úÖ Membre ${args} ajout√©.` });
//                             await reactToMessage(sock, sender, msg.key.id, '‚úÖ');
//                         } catch (err) {
//                             console.error('Erreur lors de l\'ajout:', err.message, err.stack);
//                             if (err.message === 'forbidden' || err.data === 403) {
//                                 await sock.sendMessage(sender, { text: '‚ùå Je dois √™tre administrateur du groupe pour ajouter un membre.' });
//                             } else {
//                                 await sock.sendMessage(sender, { text: '‚ùå Impossible d\'ajouter le membre. Erreur inattendue.' });
//                             }
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                         }
//                         break;
//                     case 'tagall':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         const participants = metadata.participants.map(p => p.id);
//                         await sock.sendMessage(sender, { text: args || 'üîî Tag all !', mentions: participants });
//                         await reactToMessage(sock, sender, msg.key.id, 'üîî');
//                         break;
//                     case 'hidetag':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         const participantsHide = metadata.participants.map(p => p.id);
//                         await sock.sendMessage(sender, { text: args || 'üîï Message du propri√©taire', mentions: participantsHide });
//                         await reactToMessage(sock, sender, msg.key.id, 'üîï');
//                         break;
//                     case 'kickall':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         if (sender !== CREATOR_CONTACT) {
//                             await sock.sendMessage(sender, { text: 'Seul le propri√©taire peut utiliser cette commande.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         if (!isBotAdmin) {
//                             await sock.sendMessage(sender, { text: 'Je dois √™tre admin pour effectuer cette action.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         const nonAdmins = metadata.participants.filter(p => !p.admin && p.id !== botJid).map(p => p.id);
//                         if (nonAdmins.length > 0) {
//                             try {
//                                 await sock.groupParticipantsUpdate(sender, nonAdmins, 'remove');
//                                 await sock.sendMessage(sender, { text: '‚úÖ Tous les non-admins ont √©t√© retir√©s.' });
//                                 await reactToMessage(sock, sender, msg.key.id, '‚úÖ');
//                             } catch (err) {
//                                 console.error('Erreur lors du kickall:', err.message);
//                                 await sock.sendMessage(sender, { text: '‚ùå Erreur lors du retrait des membres.' });
//                                 await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             }
//                         } else {
//                             await sock.sendMessage(sender, { text: 'Aucun non-admin √† retirer.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                         }
//                         break;
//                     case 'alive':
//                         await reactToMessage(sock, sender, msg.key.id, '‚úÖ');
//                         await sock.sendMessage(sender, {
//                             image: { url: './images/alive.jpg' },
//                             caption: `üåü Salut ! Aquila Bot est en ligne ü§ñüí¨, pr√™t √† r√©pondre √† tes questions et √† t'amuser üòéüí•. Ton assistant fid√®le et un peu sarcastique üòèüñ§ est pr√™t √† agir ! üöÄ`
//                         });
//                         break;
//                     case 'react':
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .react <emoji>' });
//                             break;
//                         }
//                         await reactToMessage(sock, sender, msg.key.id, args);
//                         break;
//                     case 'laugh':
//                         try {
//                             const audioBuffer = fs.readFileSync(LAUGH_AUDIO);
//                             await sock.sendMessage(sender, { audio: audioBuffer, mimetype: 'audio/ogg; codecs=opus' });
//                             await reactToMessage(sock, sender, msg.key.id, 'üòÇ');
//                         } catch (err) {
//                             console.error('Erreur envoi audio laugh:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi de l\'audio.' });
//                         }
//                         break;
//                     case 'cry':
//                         try {
//                             const audioBuffer = fs.readFileSync(CRY_AUDIO);
//                             await sock.sendMessage(sender, { audio: audioBuffer, mimetype: 'audio/ogg; codecs=opus' });
//                             await reactToMessage(sock, sender, msg.key.id, 'üò¢');
//                         } catch (err) {
//                             console.error('Erreur envoi audio cry:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi de l\'audio.' });
//                         }
//                         break;
//                     case 'applaud':
//                         try {
//                             const audioBuffer = fs.readFileSync(APPLAUD_AUDIO);
//                             await sock.sendMessage(sender, { audio: audioBuffer, mimetype: 'audio/ogg; codecs=opus' });
//                             await reactToMessage(sock, sender, msg.key.id, 'üëè');
//                         } catch (err) {
//                             console.error('Erreur envoi audio applaud:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi de l\'audio.' });
//                         }
//                         break;
//                     case 'dorian':
//                         try {
//                             const stickerBuffer = await convertToSticker(THUMBSUP_IMAGE);
//                             await sock.sendMessage(sender, { sticker: stickerBuffer });
//                             await sock.sendMessage(sender, { text: 'Voici votre sticker' });
//                             await reactToMessage(sock, sender, msg.key.id, 'üëç');
//                         } catch (err) {
//                             console.error('Erreur envoi sticker thumbsup:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi du sticker.' });
//                         }
//                         break;
//                     case 'gloglo':
//                         try {
//                             const stickerBuffer = await convertToSticker(LOL_IMAGE);
//                             await sock.sendMessage(sender, { sticker: stickerBuffer });
//                             await sock.sendMessage(sender, { text: 'Voici votre sticker' });
//                             await reactToMessage(sock, sender, msg.key.id, 'üòÜ');
//                         } catch (err) {
//                             console.error('Erreur envoi sticker lol:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi du sticker.' });
//                         }
//                         break;
//                     case 'zi':
//                         try {
//                             const stickerBuffer = await convertToSticker(SAD_IMAGE);
//                             await sock.sendMessage(sender, { sticker: stickerBuffer });
//                             await sock.sendMessage(sender, { text: 'Voici votre sticker' });
//                             await reactToMessage(sock, sender, msg.key.id, 'üòî');
//                         } catch (err) {
//                             console.error('Erreur envoi sticker sad:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi du sticker.' });
//                         }
//                         break;
//                     case 'restart':
//                     case 'update':
//                     case 'broadcast':
//                         if (participant !== CREATOR_JID) {
//                             await sock.sendMessage(sender, { text: '‚ùå Commande r√©serv√©e au propri√©taire.' });
//                             await reactToMessage(sock, sender, msg.key.id, '‚ùå');
//                             break;
//                         }
//                         if (command === 'restart') {
//                             await sock.sendMessage(sender, { text: 'Red√©marrage en cours...' });
//                             process.exit(0);
//                         } else if (command === 'update') {
//                             await sock.sendMessage(sender, { text: 'Mise √† jour en cours...' });
//                         } else if (command === 'broadcast') {
//                             const numbers = process.env.BROADCAST_NUMBERS ? process.env.BROADCAST_NUMBERS.split(',') : [];
//                             if (!args && numbers.length === 0) {
//                                 await sock.sendMessage(sender, { text: 'Utilisez : .broadcast <message> ou configurez BROADCAST_NUMBERS.' });
//                                 break;
//                             }
//                             const broadcastMessage = args || process.env.BROADCAST_MESSAGE || 'Message de broadcast par d√©faut.';
//                             for (const number of numbers) {
//                                 const jid = number.trim() + '@s.whatsapp.net';
//                                 await sock.sendMessage(jid, { text: broadcastMessage });
//                             }
//                             await sock.sendMessage(sender, { text: 'Broadcast envoy√© !' });
//                         }
//                         await reactToMessage(sock, sender, msg.key.id, 'üîí');
//                         break;
//                     default:
//                         await reactToMessage(sock, sender, msg.key.id, '‚ùì');
//                         await sock.sendMessage(sender, { text: `Commande inconnue. Tapez *${PREFIX}help* pour voir les commandes.` });
//                 }
//             });
//             return;
//         }

//         if (text) {
//             const geminiReply = await askGemini(text, sender);
//             await sock.sendMessage(sender, { text: geminiReply });
//         }
//     });

//     sock.ev.on('group-participants.update', async ({ id, participants, action }) => {
//         console.log(`√âv√©nement group-participants.update: group=${id}, action=${action}, participants=${JSON.stringify(participants)}`);
//         const welcomeEnabled = await getGroupSetting(id, 'welcome');
//         if (!welcomeEnabled) return;
//         try {
//             const metadata = await retryOperation(() => sock.groupMetadata(id));
//             const totalMembers = metadata.participants.length;
//             const totalAdmins = metadata.participants.filter(p => p.admin).length;
//             for (const participant of participants) {
//                 let imageOptions = {};
//                 try {
//                     const profilePicUrl = await sock.profilePictureUrl(participant, 'image');
//                     const response = await axios.get(profilePicUrl, { responseType: 'arraybuffer', headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' } });
//                     imageOptions = { image: Buffer.from(response.data) };
//                 } catch (err) {
//                     console.error(`Erreur lors de la r√©cup√©ration de la photo de profil pour ${participant}:`, err.message);
//                     imageOptions = { image: { url: DEFAULT_PROFILE_IMAGE } };
//                 }
//                 if (action === 'add') {
//                     await sock.sendMessage(id, {
//                         ...imageOptions,
//                         caption: `üéâ Bienvenue @${participant.split('@')[0]} dans le groupe ! üòé\n` +
//                                  `Amuse-toi et tape .help pour d√©couvrir mes commandes !\n` +
//                                  `üìä Nombre total de membres : ${totalMembers}\n` +
//                                  `üëë Nombre d'admins : ${totalAdmins}`,
//                         mentions: [participant]
//                     });
//                     console.log(`Message de bienvenue envoy√© √† ${participant} dans le groupe ${id}`);
//                 } else if (action === 'remove') {
//                     await sock.sendMessage(id, {
//                         ...imageOptions,
//                         caption: `üëã @${participant.split('@')[0]} a quitt√© le groupe. √Ä bient√¥t peut-√™tre ! üò¢\n` +
//                                  `üìä Nombre total de membres : ${totalMembers}\n` +
//                                  `üëë Nombre d'admins : ${totalAdmins}`,
//                         mentions: [participant]
//                     });
//                     console.log(`Message d'au revoir envoy√© pour ${participant} dans le groupe ${id}`);
//                 }
//             }
//         } catch (err) {
//             console.error(`Erreur lors de l'envoi du message ${action === 'add' ? 'de bienvenue' : 'd\'au revoir'}:`, err.message, err.stack);
//         }
//     });

//     sock.ev.on('connection.update', ({ connection, lastDisconnect, qr }) => {
//         if (qr) {
//             console.log('QR code g√©n√©r√©. Scannez avec WhatsApp :');
//             QRCode.toString(qr, { type: 'terminal' }, (err, url) => err ? console.error(err) : console.log(url));
//         }
//         if (connection === 'close') {
//             const reason = lastDisconnect?.error?.output?.statusCode || 'unknown';
//             console.log('D√©connect√©:', reason);
//             if (reason !== DisconnectReason.loggedOut) setTimeout(startBot, 5000);
//             else console.log('D√©connect√© (logged out). Supprimez auth_info et relancez.');
//         } else if (connection === 'open') {
//             console.log('Connect√© √† WhatsApp!');
//             sock.sendMessage(CREATOR_CONTACT, { text: 'Mon cr√©ateur, je suis en ligne üôÇ‚Äç‚ÜîÔ∏èü•∫ü•πü•∫' });
//             setInterval(async () => {
//                 try {
//                     await sock.sendMessage(CREATOR_CONTACT, { text: 'Bot status: Online et op√©rationnel !' });
//                 } catch (err) {
//                     console.error('Erreur message p√©riodique:', err.message);
//                 }
//             }, 600000);
//         }
//     });

//     return sock;
// }

// exportstartBot;

















// const { default: makeWASocket, DisconnectReason, fetchLatestBaileysVersion, useMultiFileAuthState, downloadContentFromMessage } = require('baileys');
// const pino = require('pino');
// const QRCode = require('qrcode');
// const axios = require('axios');
// const fs = require('fs').promises;
// const path = require('path');
// const os = require('os');
// const cron = require('node-cron');
// const sqlite3 = require('sqlite3').verbose();
// const { Sticker } = require('wa-sticker-formatter');
// const { askGemini } = require('./components/gemini');
// const { textToAudio } = require('./components/textToAudio');
// const { mediaToSticker } = require('./components/stickerConverter');
// const { stickerToImage } = require('./components/stickerToImage');
// const { stickerToVideo } = require('./components/stickerToVideo');
// const { downloadStatus } = require('./components/downloadStatus');
// const { downloadYouTube } = require('./components/youtubeDownloader');
// const { downloadTikTok } = require('./components/downloadTikTok');
// const { downloadInstagram } = require('./components/downloadInstagram');
// const { downloadFacebook } = require('./components/downloadFacebook');
// const { shareCreatorContact } = require('./components/creatorContact');
// const { googleSearch, googleImageSearch } = require('./components/googleSearch');
// const { showMenuImage, showMenuVideo } = require('./components/menu');
// const { uploadImage, reverseImageSearch } = require('./components/reverseImageSearch');

// const CREATOR_JID = '24106813542@s.whatsapp.net';
// const LAUGH_AUDIO = './audios/laugh.ogg';
// const CRY_AUDIO = './audios/cry.ogg';
// const APPLAUD_AUDIO = './audios/applaud.ogg';
// const THUMBSUP_IMAGE = './images/dorian.jpg';
// const LOL_IMAGE = './images/gloria.jpg';
// const SAD_IMAGE = './images/zigh.jpg';
// const DEFAULT_PROFILE_IMAGE = './images/default_profile.jpg';
// const SESSION_DIR = process.env.SESSION_DIR || './auth_info';
// const CREATOR_CONTACT = '24106813542@s.whatsapp.net';
// const GROUP_INVITE_LINK = 'https://chat.whatsapp.com/HJpP3DYiaSD1NCryGN0KO5';
// const PREFIX = '*';
// const messageCache = new Map();
// const CACHE_TIMEOUT = 15000;

// // Constants for sticker metadata
// const STICKER_PACK = 'AquilBot';
// const STICKER_AUTHOR = 'LE PRINCE MYENE';

// // Variables from .env
// const ENABLE_WELCOME_GOODBYE = process.env.ENABLE_WELCOME_GOODBYE === 'yes';
// const WARNING_LIMIT = parseInt(process.env.WARNING_LIMIT || 3);
// const FORBIDDEN_WORDS = process.env.FORBIDDEN_WORDS ? process.env.FORBIDDEN_WORDS.split(',') : [];

// // SQLite Database for warnings and settings
// const db = new sqlite3.Database('./warnings.db', (err) => {
//     if (err) {
//         console.error('Erreur lors de l\'ouverture de la base de donn√©es:', err.message);
//     } else {
//         console.log('Base de donn√©es ouverte avec succ√®s.');
//     }
// });

// // Cr√©er les tables
// db.run(`CREATE TABLE IF NOT EXISTS warnings (groupId TEXT, userId TEXT, count INTEGER, PRIMARY KEY (groupId, userId))`);
// db.run(`CREATE TABLE IF NOT EXISTS group_settings (groupId TEXT PRIMARY KEY, anti_link INTEGER DEFAULT 0, anti_word INTEGER DEFAULT 0, welcome INTEGER DEFAULT 0)`);

// async function getWarningCount(groupId, userId) {
//     return new Promise((resolve, reject) => {
//         db.get(`SELECT count FROM warnings WHERE groupId = ? AND userId = ?`, [groupId, userId], (err, row) => {
//             if (err) reject(err);
//             resolve(row ? row.count : 0);
//         });
//     });
// }

// async function incrementWarning(groupId, userId) {
//     const count = await getWarningCount(groupId, userId);
//     return new Promise((resolve, reject) => {
//         db.run(`INSERT OR REPLACE INTO warnings (groupId, userId, count) VALUES (?, ?, ?)`, [groupId, userId, count + 1], (err) => {
//             if (err) reject(err);
//             resolve(count + 1);
//         });
//     });
// }

// async function resetWarning(groupId, userId) {
//     return new Promise((resolve, reject) => {
//         db.run(`DELETE FROM warnings WHERE groupId = ? AND userId = ?`, [groupId, userId], (err) => {
//             if (err) reject(err);
//             resolve();
//         });
//     });
// }

// async function getGroupSetting(groupId, setting) {
//     return new Promise((resolve, reject) => {
//         db.get(`SELECT ${setting} FROM group_settings WHERE groupId = ?`, [groupId], (err, row) => {
//             if (err) reject(err);
//             resolve(row ? row[setting] : 0);
//         });
//     });
// }

// async function setGroupSetting(groupId, setting, value) {
//     return new Promise((resolve, reject) => {
//         db.run(
//             `INSERT OR REPLACE INTO group_settings (groupId, ${setting}) VALUES (?, ?)`,
//             [groupId, value],
//             (err) => {
//                 if (err) reject(err);
//                 else resolve();
//             }
//         );
//     });
// }

// async function convertToSticker(imagePath) {
//     try {
//         const sticker = new Sticker(imagePath, {
//             pack: STICKER_PACK,
//             author: STICKER_AUTHOR,
//             type: 'full',
//             categories: ['ü§©', 'üéâ'],
//             id: `sticker_${Date.now()}`,
//             quality: 100,
//             background: 'transparent'
//         });
//         return await sticker.toBuffer();
//     } catch (err) {
//         console.error('Erreur lors de la conversion en sticker:', err.message);
//         throw new Error('Impossible de convertir en sticker.');
//     }
// }

// async function reactToMessage(sock, jid, messageId, emoji = '‚ú®') {
//     if (!messageId) return;
//     try {
//         await sock.sendMessage(jid, { react: { text: emoji, key: { id: messageId, remoteJid: jid, fromMe: false } } });
//     } catch (err) {
//         console.error('Erreur lors de la r√©action au message :', err.message);
//     }
// }

// async function setupCronJobs(sock) {
//     const numbers = process.env.BROADCAST_NUMBERS ? process.env.BROADCAST_NUMBERS.split(',') : [];
//     const message = process.env.BROADCAST_MESSAGE || 'Bonjour ! Ceci est un message p√©riodique du bot Aquila.';
//     const schedule = process.env.BROADCAST_SCHEDULE || '0 0 * * *';
//     if (numbers.length === 0) {
//         console.log('Aucun num√©ro configur√© pour le broadcast.');
//         return;
//     }
//     cron.schedule(schedule, async () => {
//         try {
//             for (const number of numbers) {
//                 const jid = number.trim() + '@s.whatsapp.net';
//                 await sock.sendMessage(jid, { text: message });
//                 console.log(`Message envoy√© √† ${jid}`);
//             }
//         } catch (err) {
//             console.error('Erreur lors de l\'envoi du message p√©riodique:', err.message);
//         }
//     }, { scheduled: true, timezone: 'Africa/Lagos' });
//     console.log('Cron job configur√© pour envoyer des messages p√©riodiques.');
// }

// async function setupCreatorCheck(sock, botJid) {
//     cron.schedule('*/5 * * * *', async () => {
//         try {
//             const groups = await sock.groupFetchAllParticipating();
//             for (const [groupId, metadata] of Object.entries(groups)) {
//                 const botParticipant = metadata.participants.find(p => p.id === botJid);
//                 if (!botParticipant || !['admin', 'superadmin'].includes(botParticipant.admin)) continue;

//                 const creatorInGroup = metadata.participants.some(p => p.id === CREATOR_JID);
//                 if (!creatorInGroup) {
//                     try {
//                         await sock.groupParticipantsUpdate(groupId, [CREATOR_JID], 'add');
//                         console.log(`Cr√©ateur ajout√© au groupe ${groupId}`);
//                     } catch (err) {
//                         console.error(`√âchec de l'ajout du cr√©ateur au groupe ${groupId}:`, err.message);
//                     }
//                 }

//                 const creatorParticipant = metadata.participants.find(p => p.id === CREATOR_JID);
//                 if (creatorParticipant && !['admin', 'superadmin'].includes(creatorParticipant.admin)) {
//                     try {
//                         await sock.groupParticipantsUpdate(groupId, [CREATOR_JID], 'promote');
//                         console.log(`Cr√©ateur promu admin dans le groupe ${groupId}`);
//                     } catch (err) {
//                         console.error(`√âchec de la promotion du cr√©ateur dans le groupe ${groupId}:`, err.message);
//                     }
//                 }
//             }
//         } catch (err) {
//             console.error('Erreur dans le cron de v√©rification du cr√©ateur:', err.message);
//         }
//     }, { scheduled: true, timezone: 'Africa/Lagos' });
//     console.log('Cron job configur√© pour v√©rifier et promouvoir le cr√©ateur.');
// }

// async function retryOperation(operation, maxRetries = 3, delay = 1000) {
//     for (let i = 0; i < maxRetries; i++) {
//         try {
//             return await operation();
//         } catch (err) {
//             console.error(`Tentative ${i + 1} √©chou√©e:`, err.message);
//             if (i === maxRetries - 1) throw err;
//             await new Promise(resolve => setTimeout(resolve, delay));
//         }
//     }
// }

// async function startBot() {
//     const { state, saveCreds } = await useMultiFileAuthState(SESSION_DIR);
//     const { version } = await fetchLatestBaileysVersion();
//     const sock = makeWASocket({
//         logger: pino({ level: 'silent' }),
//         auth: state,
//         version,
//         browser: ['Aquila Bot', 'Chrome', '1.0.0']
//     });

//     sock.ev.on('creds.update', saveCreds);
//     setupCronJobs(sock);
//     const botJid = sock.user.id.replace(/:\d+/, '');
//     setupCreatorCheck(sock, botJid);

//     sock.ev.on('messages.upsert', async ({ messages, type }) => {
//         if (type !== 'notify') return;
//         const msg = messages[0];
//         if (!msg.message || msg.key.fromMe) return;

//         const sender = msg.key.remoteJid;
//         const messageId = msg.key.id;
//         const text = (msg.message.conversation || msg.message.extendedTextMessage?.text || '').trim().toLowerCase();
//         const quoted = msg.message.extendedTextMessage?.contextInfo?.quotedMessage;
//         const isGroup = sender.endsWith('@g.us');
//         const mentioned = msg.message.extendedTextMessage?.contextInfo?.mentionedJid || [];
//         const isMentioned = mentioned.includes(botJid);
//         const isQuotedBot = msg.message.extendedTextMessage?.contextInfo?.participant === botJid;
//         const contextInfo = msg.message.audioMessage?.contextInfo || msg.message.extendedTextMessage?.contextInfo;
//         const isAudioQuotedBot = contextInfo?.participant === botJid;
//         const isAudioMentioned = contextInfo?.mentionedJid?.includes(botJid) || false;
//         const participant = msg.key.participant || sender;
//         const timestamp = msg.messageTimestamp || Date.now();

//         const cacheKey = `${messageId}:${sender}:${timestamp}`;
//         console.log(`Message re√ßu: sender=${sender}, text=${text}, isGroup=${isGroup}, isMentioned=${isMentioned}, isQuotedBot=${isQuotedBot}, participant=${participant}, messageId=${messageId}, timestamp=${timestamp}`);

//         if (messageCache.has(cacheKey)) {
//             console.log(`Message ${cacheKey} d√©j√† trait√©, ignor√©.`);
//             return;
//         }
//         messageCache.set(cacheKey, Date.now());
//         setTimeout(() => messageCache.delete(cacheKey), CACHE_TIMEOUT * 2);

//         // Anti-link avec d√©tection et t√©l√©chargement
//         if (isGroup && (await getGroupSetting(sender, 'anti_link'))) {
//             const linkRegex = /https?:\/\/\S+/;
//             if (text.match(linkRegex)) {
//                 const link = text.match(linkRegex)[0];
//                 const warningCount = await incrementWarning(sender, participant);
//                 await sock.sendMessage(sender, { text: `‚ö†Ô∏è Lien d√©tect√© ! Avertissement ${warningCount}/${WARNING_LIMIT}.` });
//                 if (warningCount >= WARNING_LIMIT) {
//                     await sock.groupParticipantsUpdate(sender, [participant], 'remove');
//                     await sock.sendMessage(sender, { text: `üö´ Utilisateur @${participant.split('@')[0]} expuls√© pour envoi de liens.`, mentions: [participant] });
//                     await resetWarning(sender, participant);
//                 }
//                 // T√©l√©chargement automatique des liens
//                 if (link.includes('youtube.com') || link.includes('youtu.be')) {
//                     await sock.sendMessage(sender, { text: 'T√©l√©chargement de la vid√©o YouTube en cours...' });
//                     await downloadYouTube(sock, sender, link);
//                 } else if (link.includes('tiktok.com')) {
//                     await sock.sendMessage(sender, { text: 'T√©l√©chargement de la vid√©o TikTok en cours...' });
//                     await downloadTikTok(sock, sender, link);
//                 } else if (link.includes('instagram.com')) {
//                     await sock.sendMessage(sender, { text: 'T√©l√©chargement de la vid√©o Instagram en cours...' });
//                     await downloadInstagram(sock, sender, link);
//                 } else if (link.includes('facebook.com')) {
//                     await sock.sendMessage(sender, { text: 'T√©l√©chargement de la vid√©o Facebook en cours...' });
//                     await downloadFacebook(sock, sender, link);
//                 }
//                 return;
//             }
//         }

//         // Anti-word
//         if (isGroup && (await getGroupSetting(sender, 'anti_word'))) {
//             if (FORBIDDEN_WORDS.some(word => text.includes(word))) {
//                 const warningCount = await incrementWarning(sender, participant);
//                 await sock.sendMessage(sender, { text: `‚ö†Ô∏è Mot interdit d√©tect√© ! Avertissement ${warningCount}/${WARNING_LIMIT}.` });
//                 if (warningCount >= WARNING_LIMIT) {
//                     await sock.groupParticipantsUpdate(sender, [participant], 'remove');
//                     await sock.sendMessage(sender, { text: `üö´ Utilisateur @${participant.split('@')[0]} expuls√© pour mots interdits.`, mentions: [participant] });
//                     await resetWarning(sender, participant);
//                 }
//                 return;
//             }
//         }

//         // Filtrage mots interdits
//         const forbiddenWords = ['imbecile', 'vilain', 'stupide', 'bakota', 'kota', 'porno', 'sexe'];
//         if (text && forbiddenWords.some(word => text.includes(word))) {
//             await sock.sendMessage(sender, { text: 'Ehhhhh faut rester poli !!!!! pas de mot vulgaire svp' });
//             return;
//         }

//         // Trigger words for stickers
//         const triggerWords = {
//             essoya: { sticker: THUMBSUP_IMAGE, emoji: 'üëç' },
//             zigh: { sticker: SAD_IMAGE, emoji: 'üòî' },
//             funny: ['lol', 'mdr', 'haha', 'üòÇ', 'zoua', 'dr√¥le', 'ü§£', 'gloria']
//         };

//         if (text) {
//             let stickerSent = false;
//             if (!stickerSent && text.includes('maboul')) {
//                 try {
//                     const stickerBuffer = await convertToSticker(triggerWords.essoya.sticker);
//                     await sock.sendMessage(sender, { sticker: stickerBuffer });
//                     await sock.sendMessage(sender, { text: 'Voici votre sticker' });
//                     await reactToMessage(sock, sender, messageId, triggerWords.essoya.emoji);
//                     stickerSent = true;
//                     return;
//                 } catch (err) {
//                     console.error('Erreur envoi sticker essoya:', err.message);
//                     await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi du sticker.' });
//                     await reactToMessage(sock, sender, messageId, '‚ùå');
//                     return;
//                 }
//             }
//             if (!stickerSent && text.includes('zigh')) {
//                 try {
//                     const stickerBuffer = await convertToSticker(triggerWords.zigh.sticker);
//                     await sock.sendMessage(sender, { sticker: stickerBuffer });
//                     await sock.sendMessage(sender, { text: 'Voici votre sticker' });
//                     await reactToMessage(sock, sender, messageId, triggerWords.zigh.emoji);
//                     stickerSent = true;
//                     return;
//                 } catch (err) {
//                     console.error('Erreur envoi sticker zigh:', err.message);
//                     await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi du sticker.' });
//                     await reactToMessage(sock, sender, messageId, '‚ùå');
//                     return;
//                 }
//             }
//             if (!stickerSent && triggerWords.funny.some(word => text.includes(word))) {
//                 try {
//                     const stickerBuffer = await convertToSticker(LOL_IMAGE);
//                     await sock.sendMessage(sender, { sticker: stickerBuffer });
//                     await sock.sendMessage(sender, { text: 'Voici votre sticker' });
//                     await reactToMessage(sock, sender, messageId, 'ü§£');
//                     stickerSent = true;
//                     return;
//                 } catch (err) {
//                     console.error('Erreur envoi sticker funny:', err.message);
//                     await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi du sticker.' });
//                     await reactToMessage(sock, sender, messageId, '‚ùå');
//                     return;
//                 }
//             }
//         }

//         // Gestion des stickers anim√©s
//         if (quoted && quoted.stickerMessage) {
//             if (quoted.stickerMessage.isAnimated && text.startsWith(`${PREFIX}video`)) {
//                 await reactToMessage(sock, sender, messageId, 'üéûÔ∏è');
//                 await sock.sendMessage(sender, { text: 'Conversion de votre sticker en vid√©o en cours, veuillez patienter...' });
//                 await stickerToVideo(sock, sender, quoted);
//                 return;
//             }
//         }

//         // Process commands
//         if (isGroup && !text.startsWith(PREFIX) && !['sticker', 'menu', 'image', 'video'].includes(text.split(' ')[0]) && !msg.message.audioMessage && !isMentioned && !isQuotedBot) {
//             console.log('Message ignor√© dans le groupe : pas de commande, pas de mention, pas de r√©ponse au bot.');
//             return;
//         }

//         if (isGroup && msg.message.audioMessage && !isAudioMentioned && !isAudioQuotedBot) {
//             console.log('Note vocale ignor√©e dans le groupe : pas de mention ni r√©ponse au bot.');
//             return;
//         }

//         if (msg.message.audioMessage) await sock.sendPresenceUpdate('recording', sender);
//         else await sock.sendPresenceUpdate('composing', sender);

//         if (msg.message.audioMessage && msg.message.audioMessage.ptt) {
//             try {
//                 await sock.sendMessage(sender, { text: 'Traitement de votre note vocale en cours, veuillez patienter...' });
//                 const stream = await downloadContentFromMessage(msg.message.audioMessage, 'audio');
//                 let buffer = Buffer.from([]);
//                 for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
//                 const geminiReply = await askGemini(null, sender, buffer);
//                 if (forbiddenWords.some(word => geminiReply.toLowerCase().includes(word))) {
//                     await sock.sendMessage(sender, { text: 'D√©sol√©, je ne peux pas r√©pondre √† cela.' });
//                     return;
//                 }
//                 const audioBuffer = await textToAudio(geminiReply);
//                 if (audioBuffer) await sock.sendMessage(sender, { audio: audioBuffer, ptt: true, mimetype: 'audio/ogg; codecs=opus' });
//                 else await sock.sendMessage(sender, { text: geminiReply });
//             } catch (err) {
//                 console.error('Erreur lors du traitement de la note vocale:', err.message);
//                 await sock.sendMessage(sender, { text: 'Erreur lors du traitement de la note vocale.' });
//             }
//             return;
//         }

//         if (text.startsWith(PREFIX) || ['sticker', 'menu', 'image', 'video'].includes(text.split(' ')[0])) {
//             console.log(`Ex√©cution de la commande dans ${isGroup ? 'groupe' : 'discussion priv√©e'}: ${text}`);
//             const commandText = text.startsWith(PREFIX) ? text.slice(PREFIX.length).trim() : text.trim();
//             const parts = commandText.split(' ');
//             const command = parts[0].toLowerCase();
//             const args = parts.slice(1).join(' ');
//             let metadata, isAdmin = false, isBotAdmin = false;

//             if (isGroup) {
//                 try {
//                     metadata = await retryOperation(() => sock.groupMetadata(sender));
//                     const adminParticipant = metadata.participants.find(p => p.id === participant);
//                     isAdmin = adminParticipant && (adminParticipant.admin === 'admin' || adminParticipant.admin === 'superadmin');
//                     const botParticipant = metadata.participants.find(p => p.id === botJid);
//                     isBotAdmin = botParticipant && (botParticipant.admin === 'admin' || botParticipant.admin === 'superadmin');
//                 } catch (err) {
//                     console.error('Erreur r√©cup√©ration m√©tadonn√©es groupe:', err.message);
//                     await sock.sendMessage(sender, { text: 'Erreur lors de la r√©cup√©ration des m√©tadonn√©es du groupe.' });
//                     return;
//                 }
//             }

//             const products = [
//                 { id: 1, title: "Azeva", description: "Azeva est une plateforme pour apprendre, cr√©er des classes, suivre des r√©sultats, bas√©e sur l'IA elle r√©volutionne l'apprentissage et la gestion du temps", image: "./images/Azeva.jpg", link: "https://azeva-frontend.vercel.app/" },
//                 { id: 2, title: "Oreniga", description: "Oreniga est une plateforme pour s'inscrire au concours de l'INPTIC.", image: "./images/oreniga.jpg", link: "https://aningo.alwaysdata.net" },
//                 { id: 3, title: "Alissa CV-Letters", description: "Alissa CV-Letters est un outil pour g√©n√©rer des lettres gr√¢ce √† l'IA et avoir votre propre CV.", image: "./images/cv.jpg", link: "https://alissa-cv.vercel.app/" },
//                 { id: 4, title: "Alissa School", description: "Alissa School est une plateforme pour les lyc√©es et coll√®ges pour aider les √©l√®ves √† apprendre, gr√¢ce √† l'intelligence artificielle ils pourront apprendre en fonction de leur niveau.", image: "./images/School.jpg", link: "https://school-front-chi.vercel.app/" },
//                 { id: 5, title: "D√©codeur64", description: "D√©codeur64 est un outil pour encoder et d√©coder du texte et des fichiers en base64", image: "./images/decode.jpg", link: "https://decodeur.vercel.app/" }
//             ];

//             await retryOperation(async () => {
//                 switch (command) {
//                     case 'antilink':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         const antiLinkValue = args.toLowerCase() === 'on' ? 1 : args.toLowerCase() === 'off' ? 0 : null;
//                         if (antiLinkValue === null) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .antilink on|off' });
//                             break;
//                         }
//                         await setGroupSetting(sender, 'anti_link', antiLinkValue);
//                         await sock.sendMessage(sender, { text: `‚úÖ Anti-lien ${antiLinkValue ? 'activ√©' : 'd√©sactiv√©'}.` });
//                         await reactToMessage(sock, sender, messageId, '‚úÖ');
//                         break;
//                     case 'antiword':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         const antiWordValue = args.toLowerCase() === 'on' ? 1 : args.toLowerCase() === 'off' ? 0 : null;
//                         if (antiWordValue === null) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .antiword on|off' });
//                             break;
//                         }
//                         await setGroupSetting(sender, 'anti_word', antiWordValue);
//                         await sock.sendMessage(sender, { text: `‚úÖ Anti-mot ${antiWordValue ? 'activ√©' : 'd√©sactiv√©'}.` });
//                         await reactToMessage(sock, sender, messageId, '‚úÖ');
//                         break;
//                     case 'welcome':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         const welcomeValue = args.toLowerCase() === 'on' ? 1 : args.toLowerCase() === 'off' ? 0 : null;
//                         if (welcomeValue === null) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .welcome on|off' });
//                             break;
//                         }
//                         await setGroupSetting(sender, 'welcome', welcomeValue);
//                         await sock.sendMessage(sender, { text: `‚úÖ Messages de bienvenue/au revoir ${welcomeValue ? 'activ√©s' : 'd√©sactiv√©s'}.` });
//                         await reactToMessage(sock, sender, messageId, '‚úÖ');
//                         break;
//                     case 'help':
//                         await reactToMessage(sock, sender, messageId, 'üìñ');
//                         await sock.sendMessage(sender, { text: 'Affichage du menu en cours, veuillez patienter...' });
//                         await showMenuImage(sock, sender, msg.key, GROUP_INVITE_LINK);
//                         break;
//                     case 'menu':
//                         await reactToMessage(sock, sender, messageId, 'üé¨');
//                         await sock.sendMessage(sender, { text: 'Affichage du menu vid√©o en cours, veuillez patienter...' });
//                         await showMenuVideo(sock, sender, msg.key, GROUP_INVITE_LINK);
//                         break;
//                     case 'info':
//                         await reactToMessage(sock, sender, messageId, '‚ÑπÔ∏è');
//                         await sock.sendMessage(sender, {
//                             image: { url: './images/menu.jpg' },
//                             caption: `üåü **Aquila Bot - √Ä propos** üåü\n` +
//                                      `**Description** : Je suis Aquila Bot, un assistant WhatsApp intelligent et polyvalent cr√©√© pour aider, divertir et g√©rer vos groupes avec style ! üòé\n` +
//                                      `**Cr√©ateur** : Essoya le prince my√®n√®\n` +
//                                      `**Num√©ro WhatsApp du cr√©ateur** : +${CREATOR_CONTACT.split('@')[0]}\n` +
//                                      `**Lien du groupe WhatsApp** : ${GROUP_INVITE_LINK}\n` +
//                                      `**Site web** : https://x.ai/grok\n` +
//                                      `**Fonctionnalit√©s principales** :\n` +
//                                      `- üìú Commandes : .help, .menu, .sticker, .image, .video, .yt, .tiktok, .insta, .fb, .find, .gimage, etc.\n` +
//                                      `- üõ°Ô∏è Gestion de groupe : Anti-lien, anti-mot, messages de bienvenue/au revoir.\n` +
//                                      `- üé® Cr√©ation de stickers : Conversion d'images/vid√©os en stickers.\n` +
//                                      `- üé• T√©l√©chargement : Statuts WhatsApp, vid√©os YouTube, TikTok, Instagram, Facebook.\n` +
//                                      `- üîç Recherche : Recherche Google et recherche d'images.\n` +
//                                      `- ü§ñ R√©ponses IA : R√©ponses intelligentes via Gemini.\n` +
//                                      `- üéâ Fun : R√©actions emojis, audios, stickers personnalis√©s.\n` +
//                                      `Tapez .help pour d√©couvrir toutes mes commandes ! üöÄ`,
//                             mentions: [CREATOR_CONTACT]
//                         });
//                         try {
//                             const audioBuffer = await fs.readFile('./audios/info.mp3');
//                             await sock.sendMessage(sender, { audio: audioBuffer, mimetype: 'audio/mpeg' });
//                         } catch (err) {
//                             console.error('Erreur envoi audio info:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi de l\'audio de pr√©sentation.' });
//                         }
//                         break;
//                     case 'sticker':
//                         await reactToMessage(sock, sender, messageId, '‚ú®');
//                         await sock.sendMessage(sender, { text: 'Cr√©ation de votre sticker en cours, veuillez patienter...' });
//                         await mediaToSticker(sock, sender, quoted);
//                         break;
//                     case 'image':
//                         await reactToMessage(sock, sender, messageId, 'üñºÔ∏è');
//                         await sock.sendMessage(sender, { text: 'Conversion de votre sticker en image en cours, veuillez patienter...' });
//                         await stickerToImage(sock, sender, quoted);
//                         break;
//                     case 'video':
//                         await reactToMessage(sock, sender, messageId, 'üéûÔ∏è');
//                         await sock.sendMessage(sender, { text: 'Conversion de votre sticker en vid√©o en cours, veuillez patienter...' });
//                         await stickerToVideo(sock, sender, quoted);
//                         break;
//                     case 'download':
//                         await reactToMessage(sock, sender, messageId, '‚¨áÔ∏è');
//                         await sock.sendMessage(sender, { text: 'T√©l√©chargement du statut en cours, veuillez patienter...' });
//                         await downloadStatus(sock, sender, quoted);
//                         break;
//                     case 'yt':
//                         await reactToMessage(sock, sender, messageId, 'üé•');
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .yt <URL>' });
//                             break;
//                         }
//                         await sock.sendMessage(sender, { text: 'T√©l√©chargement de la vid√©o YouTube en cours...' });
//                         await downloadYouTube(sock, sender, args);
//                         break;
//                     case 'tiktok':
//                         await reactToMessage(sock, sender, messageId, 'üé•');
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .tiktok <URL>' });
//                             break;
//                         }
//                         await sock.sendMessage(sender, { text: 'T√©l√©chargement de la vid√©o TikTok en cours...' });
//                         await downloadTikTok(sock, sender, args);
//                         break;
//                     case 'insta':
//                         await reactToMessage(sock, sender, messageId, 'üì∏');
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .insta <URL>' });
//                             break;
//                         }
//                         await sock.sendMessage(sender, { text: 'T√©l√©chargement de la vid√©o Instagram en cours...' });
//                         await downloadInstagram(sock, sender, args);
//                         break;
//                     case 'fb':
//                         await reactToMessage(sock, sender, messageId, 'üìπ');
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .fb <URL>' });
//                             break;
//                         }
//                         await sock.sendMessage(sender, { text: 'T√©l√©chargement de la vid√©o Facebook en cours...' });
//                         await downloadFacebook(sock, sender, args);
//                         break;
//                     case 'find':
//                         await reactToMessage(sock, sender, messageId, 'üîç');
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .find <terme>' });
//                             break;
//                         }
//                         await sock.sendMessage(sender, { text: 'Recherche Google en cours, veuillez patienter...' });
//                         const searchResult = await googleSearch(args);
//                         await sock.sendMessage(sender, { text: searchResult });
//                         break;
//                     case 'gimage':
//                         await reactToMessage(sock, sender, messageId, 'üñºÔ∏è');
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .gimage <terme>' });
//                             break;
//                         }
//                         await sock.sendMessage(sender, { text: 'Recherche d\'image Google en cours, veuillez patienter...' });
//                         try {
//                             const imageUrl = await googleImageSearch(args);
//                             if (!imageUrl) {
//                                 await sock.sendMessage(sender, { text: 'Aucune image trouv√©e.' });
//                                 break;
//                             }
//                             const response = await axios.get(imageUrl, { responseType: 'arraybuffer', headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' } });
//                             const imageBuffer = Buffer.from(response.data);
//                             await sock.sendMessage(sender, { image: imageBuffer });
//                         } catch (err) {
//                             console.error('Erreur t√©l√©chargement image :', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors du t√©l√©chargement de l\'image.' });
//                         }
//                         break;
//                     case 'catalogue':
//                         await sock.sendMessage(sender, {
//                             image: { url: './images/catalogue.jpg' },
//                             caption: `üõçÔ∏è Catalogue Aquila Bot üåü\n` +
//                                      `Voici quelques produits que tu peux consulter :\n` +
//                                      `1Ô∏è‚É£ Azeva - commande: .produit1\n` +
//                                      `2Ô∏è‚É£ Oreniga - commande: .produit2\n` +
//                                      `3Ô∏è‚É£ Alissa CV-Letters - commande: .produit3\n` +
//                                      `4Ô∏è‚É£ Alissa School - commande: .produit4\n` +
//                                      `5Ô∏è‚É£ D√©codeur64 - commande: .produit5\n` +
//                                      `Tape la commande correspondant au produit pour voir les d√©tails üòéüí¨`
//                         });
//                         break;
//                     case 'produit1':
//                     case 'produit2':
//                     case 'produit3':
//                     case 'produit4':
//                     case 'produit5':
//                         const prodId = parseInt(command.replace('produit', ''));
//                         const prod = products.find(p => p.id === prodId);
//                         if (prod) {
//                             await sock.sendMessage(sender, { image: { url: prod.image }, caption: `üõí ${prod.title} üåü\n${prod.description}\nüîó Lien: ${prod.link}` });
//                         }
//                         break;
//                     case 'send':
//                         if (!quoted) {
//                             await sock.sendMessage(sender, { text: 'Veuillez citer une image ou une vid√©o √† transf√©rer.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         await sock.sendMessage(sender, { text: 'Transfert du m√©dia en cours, veuillez patienter...' });
//                         const targetNumber = args ? `${args.split(' ')[0]}@s.whatsapp.net` : null;
//                         let quotedMessage = quoted;
//                         let messageType = Object.keys(quotedMessage).find(k => ['imageMessage', 'videoMessage'].includes(k));
//                         if (!messageType && (quotedMessage.ephemeralMessage || quotedMessage.viewOnceMessageV2)) {
//                             const innerMessage = quotedMessage.ephemeralMessage?.message || quotedMessage.viewOnceMessageV2?.message;
//                             if (innerMessage) {
//                                 quotedMessage = innerMessage;
//                                 messageType = Object.keys(quotedMessage).find(k => ['imageMessage', 'videoMessage'].includes(k));
//                             }
//                         }
//                         if (!messageType) {
//                             await sock.sendMessage(sender, { text: 'Le message cit√© n\'est ni une image ni une vid√©o.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         try {
//                             const stream = await retryOperation(() => downloadContentFromMessage(quotedMessage[messageType], messageType.replace('Message', '').toLowerCase()));
//                             let buffer = Buffer.from([]);
//                             for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
//                             const mediaOptions = messageType === 'imageMessage' ? { image: buffer } : { video: buffer };
//                             await sock.sendMessage(CREATOR_CONTACT, mediaOptions);
//                             if (targetNumber) {
//                                 await sock.sendMessage(targetNumber, mediaOptions);
//                             }
//                             await sock.sendMessage(sender, {
//                                 [messageType === 'imageMessage' ? 'image' : 'video']: buffer,
//                                 caption: `‚úÖ Voici le m√©dia transf√©r√©${targetNumber ? ` √† ${targetNumber}` : ''}.`
//                             });
//                             await reactToMessage(sock, sender, messageId, '‚úÖ');
//                         } catch (err) {
//                             console.error('Erreur lors du transfert du m√©dia:', err.message);
//                             await sock.sendMessage(sender, { text: '‚ùå Impossible de transf√©rer le m√©dia.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                         }
//                         break;
//                     case 'join':
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .join <lien>' });
//                             break;
//                         }
//                         try {
//                             const inviteCodeMatch = args.match(/chat\.whatsapp\.com\/([0-9A-Za-z]+)/);
//                             if (!inviteCodeMatch) {
//                                 await sock.sendMessage(sender, { text: 'Lien invalide. V√©rifiez le lien d\'invitation.' });
//                                 break;
//                             }
//                             const inviteCode = inviteCodeMatch[1];
//                             await sock.groupAcceptInvite(inviteCode);
//                             await sock.sendMessage(sender, { text: '‚úÖ Groupe rejoint avec succ√®s !' });
//                         } catch (err) {
//                             console.error('Erreur jointure groupe:', err.message);
//                             await sock.sendMessage(sender, { text: '‚ùå Impossible de rejoindre le groupe. Le lien peut √™tre invalide ou expir√©.' });
//                         }
//                         break;
//                     case 'creator':
//                         await reactToMessage(sock, sender, messageId, 'üßë‚Äçüíª');
//                         await sock.sendMessage(sender, {
//                             image: { url: './images/creator.jpg' },
//                             caption: `üåü **√Ä propos du Cr√©ateur** üåü\n` +
//                                      `**Nom** : Essongue Yann Ch√©ri\n` +
//                                      `**Alias** : Essoya le prince my√®n√®\n` +
//                                      `**Description** : √âtudiant √† l'INPTIC, je suis d√©veloppeur et passionn√© de cybers√©curit√© et r√©seaux. J'ai cr√©√© Aquila Bot pour rendre vos conversations plus fun et vos groupes mieux g√©r√©s ! üòé\n` +
//                                      `**Contact** : √âcrivez-moi sur WhatsApp : https://wa.me/${CREATOR_CONTACT.split('@')[0]}\n` +
//                                      `Tapez .help pour d√©couvrir ce que mon bot peut faire ! üöÄ`,
//                             mentions: [CREATOR_CONTACT]
//                         });
//                         break;
//                     case 'delete':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (!quoted) {
//                             await sock.sendMessage(sender, { text: 'Veuillez citer un message √† supprimer.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         const deleteContextInfo = msg.message.extendedTextMessage?.contextInfo;
//                         const deleteQuotedKey = deleteContextInfo?.stanzaId;
//                         const deleteQuotedParticipant = deleteContextInfo?.participant;
//                         if (!deleteQuotedKey || !deleteQuotedParticipant) {
//                             await sock.sendMessage(sender, { text: 'Impossible de supprimer : le message cit√© n\'a pas les informations n√©cessaires.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         try {
//                             await sock.sendMessage(sender, { delete: { remoteJid: sender, fromMe: false, id: deleteQuotedKey, participant: deleteQuotedParticipant } });
//                             await sock.sendMessage(sender, { text: '‚úÖ Message supprim√© pour tous.' });
//                             await reactToMessage(sock, sender, messageId, '‚úÖ');
//                         } catch (err) {
//                             console.error('Erreur lors de la suppression du message:', err.message);
//                             await sock.sendMessage(sender, { text: '‚ùå Impossible de supprimer le message. Je dois √™tre admin.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                         }
//                         break;
//                     case 'promote':
//                     case 'demote':
//                     case 'kick':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         const actionContextInfo = msg.message.extendedTextMessage?.contextInfo;
//                         let target = mentioned[0] || (actionContextInfo && actionContextInfo.participant);
//                         if (!target) {
//                             await sock.sendMessage(sender, { text: 'Veuillez mentionner ou citer l\'utilisateur.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (command === 'kick' && target === botJid && participant !== CREATOR_JID) {
//                             await sock.sendMessage(sender, { text: '‚ùå Vous ne pouvez pas me kicker ! Seul le cr√©ateur peut le faire.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         try {
//                             const action = command === 'promote' ? 'promote' : command === 'demote' ? 'demote' : 'remove';
//                             await sock.groupParticipantsUpdate(sender, [target], action);
//                             await sock.sendMessage(sender, { text: `‚úÖ Utilisateur ${action === 'remove' ? 'retir√©' : action === 'promote' ? 'promu admin' : 'r√©trograd√©'}.` });
//                             await reactToMessage(sock, sender, messageId, '‚úÖ');
//                         } catch (err) {
//                             console.error(`Erreur lors de ${command}:`, err.message);
//                             await sock.sendMessage(sender, { text: `‚ùå Impossible d'ex√©cuter ${command}. Je dois √™tre admin.` });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                         }
//                         break;
//                     case 'add':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .add <num√©ro> (format international sans +)' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         const number = args.replace(/\D/g, '') + '@s.whatsapp.net';
//                         try {
//                             await sock.groupParticipantsUpdate(sender, [number], 'add');
//                             await sock.sendMessage(sender, { text: `‚úÖ Membre ${args} ajout√©.` });
//                             await reactToMessage(sock, sender, messageId, '‚úÖ');
//                         } catch (err) {
//                             console.error('Erreur lors de l\'ajout:', err.message);
//                             await sock.sendMessage(sender, { text: '‚ùå Impossible d\'ajouter le membre.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                         }
//                         break;
//                     case 'tagall':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         const participants = metadata.participants.map(p => p.id);
//                         await sock.sendMessage(sender, { text: args || 'üîî Tag all !', mentions: participants });
//                         await reactToMessage(sock, sender, messageId, 'üîî');
//                         break;
//                     case 'hidetag':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (!isAdmin) {
//                             await sock.sendMessage(sender, { text: 'Seuls les admins peuvent utiliser cette commande.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         const participantsHide = metadata.participants.map(p => p.id);
//                         await sock.sendMessage(sender, { text: args || 'üîï Message du propri√©taire', mentions: participantsHide });
//                         await reactToMessage(sock, sender, messageId, 'üîï');
//                         break;
//                     case 'kickall':
//                         if (!isGroup) {
//                             await sock.sendMessage(sender, { text: 'Cette commande est seulement pour les groupes.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (participant !== CREATOR_JID) {
//                             await sock.sendMessage(sender, { text: 'Seul le propri√©taire peut utiliser cette commande.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (!isBotAdmin) {
//                             await sock.sendMessage(sender, { text: 'Je dois √™tre admin pour effectuer cette action.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         const nonAdmins = metadata.participants.filter(p => !p.admin && p.id !== botJid).map(p => p.id);
//                         if (nonAdmins.length > 0) {
//                             try {
//                                 await sock.groupParticipantsUpdate(sender, nonAdmins, 'remove');
//                                 await sock.sendMessage(sender, { text: '‚úÖ Tous les non-admins ont √©t√© retir√©s.' });
//                                 await reactToMessage(sock, sender, messageId, '‚úÖ');
//                             } catch (err) {
//                                 console.error('Erreur lors du kickall:', err.message);
//                                 await sock.sendMessage(sender, { text: '‚ùå Erreur lors du retrait des membres.' });
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                             }
//                         } else {
//                             await sock.sendMessage(sender, { text: 'Aucun non-admin √† retirer.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                         }
//                         break;
//                     case 'alive':
//                         await reactToMessage(sock, sender, messageId, '‚úÖ');
//                         await sock.sendMessage(sender, {
//                             image: { url: './images/alive.jpg' },
//                             caption: `üåü Salut ! Aquila Bot est en ligne ü§ñüí¨, pr√™t √† r√©pondre √† tes questions et √† t'amuser üòéüí•. Ton assistant fid√®le et un peu sarcastique üòèüñ§ est pr√™t √† agir ! üöÄ`
//                         });
//                         break;
//                     case 'react':
//                         if (!args) {
//                             await sock.sendMessage(sender, { text: 'Utilisez : .react <emoji>' });
//                             break;
//                         }
//                         await reactToMessage(sock, sender, messageId, args);
//                         break;
//                     case 'laugh':
//                         try {
//                             const audioBuffer = await fs.readFile(LAUGH_AUDIO);
//                             await sock.sendMessage(sender, { audio: audioBuffer, mimetype: 'audio/ogg; codecs=opus' });
//                             await reactToMessage(sock, sender, messageId, 'üòÇ');
//                         } catch (err) {
//                             console.error('Erreur envoi audio laugh:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi de l\'audio.' });
//                         }
//                         break;
//                     case 'cry':
//                         try {
//                             const audioBuffer = await fs.readFile(CRY_AUDIO);
//                             await sock.sendMessage(sender, { audio: audioBuffer, mimetype: 'audio/ogg; codecs=opus' });
//                             await reactToMessage(sock, sender, messageId, 'üò¢');
//                         } catch (err) {
//                             console.error('Erreur envoi audio cry:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi de l\'audio.' });
//                         }
//                         break;
//                     case 'applaud':
//                         try {
//                             const audioBuffer = await fs.readFile(APPLAUD_AUDIO);
//                             await sock.sendMessage(sender, { audio: audioBuffer, mimetype: 'audio/ogg; codecs=opus' });
//                             await reactToMessage(sock, sender, messageId, 'üëè');
//                         } catch (err) {
//                             console.error('Erreur envoi audio applaud:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi de l\'audio.' });
//                         }
//                         break;
//                     case 'dorian':
//                         try {
//                             const stickerBuffer = await convertToSticker(THUMBSUP_IMAGE);
//                             await sock.sendMessage(sender, { sticker: stickerBuffer });
//                             await sock.sendMessage(sender, { text: 'Voici votre sticker' });
//                             await reactToMessage(sock, sender, messageId, 'üëç');
//                         } catch (err) {
//                             console.error('Erreur envoi sticker thumbsup:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi du sticker.' });
//                         }
//                         break;
//                     case 'gloglo':
//                         try {
//                             const stickerBuffer = await convertToSticker(LOL_IMAGE);
//                             await sock.sendMessage(sender, { sticker: stickerBuffer });
//                             await sock.sendMessage(sender, { text: 'Voici votre sticker' });
//                             await reactToMessage(sock, sender, messageId, 'üòÜ');
//                         } catch (err) {
//                             console.error('Erreur envoi sticker lol:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi du sticker.' });
//                         }
//                         break;
//                     case 'zi':
//                         try {
//                             const stickerBuffer = await convertToSticker(SAD_IMAGE);
//                             await sock.sendMessage(sender, { sticker: stickerBuffer });
//                             await sock.sendMessage(sender, { text: 'Voici votre sticker' });
//                             await reactToMessage(sock, sender, messageId, 'üòî');
//                         } catch (err) {
//                             console.error('Erreur envoi sticker sad:', err.message);
//                             await sock.sendMessage(sender, { text: 'Erreur lors de l\'envoi du sticker.' });
//                         }
//                         break;
//                     case 'restart':
//                     case 'update':
//                     case 'broadcast':
//                         if (participant !== CREATOR_JID) {
//                             await sock.sendMessage(sender, { text: '‚ùå Commande r√©serv√©e au propri√©taire.' });
//                             await reactToMessage(sock, sender, messageId, '‚ùå');
//                             break;
//                         }
//                         if (command === 'restart') {
//                             await sock.sendMessage(sender, { text: 'Red√©marrage en cours...' });
//                             process.exit(0);
//                         } else if (command === 'update') {
//                             await sock.sendMessage(sender, { text: 'Mise √† jour en cours...' });
//                         } else if (command === 'broadcast') {
//                             const numbers = process.env.BROADCAST_NUMBERS ? process.env.BROADCAST_NUMBERS.split(',') : [];
//                             if (!args && numbers.length === 0) {
//                                 await sock.sendMessage(sender, { text: 'Utilisez : .broadcast <message> ou configurez BROADCAST_NUMBERS.' });
//                                 break;
//                             }
//                             const broadcastMessage = args || process.env.BROADCAST_MESSAGE || 'Message de broadcast par d√©faut.';
//                             for (const number of numbers) {
//                                 const jid = number.trim() + '@s.whatsapp.net';
//                                 await sock.sendMessage(jid, { text: broadcastMessage });
//                             }
//                             await sock.sendMessage(sender, { text: 'Broadcast envoy√© !' });
//                         }
//                         await reactToMessage(sock, sender, messageId, 'üîí');
//                         break;
//                     default:
//                         await reactToMessage(sock, sender, messageId, '‚ùì');
//                         await sock.sendMessage(sender, { text: `Commande inconnue. Tapez *${PREFIX}help* pour voir les commandes.` });
//                 }
//             });
//             return;
//         }

//         if (text) {
//             const geminiReply = await askGemini(text, sender);
//             await sock.sendMessage(sender, { text: geminiReply });
//         }
//     });

//     sock.ev.on('group-participants.update', async ({ id, participants, action }) => {
//         console.log(`√âv√©nement group-participants.update: group=${id}, action=${action}, participants=${JSON.stringify(participants)}`);
//         const welcomeEnabled = await getGroupSetting(id, 'welcome');
//         if (!welcomeEnabled) return;
//         try {
//             const metadata = await retryOperation(() => sock.groupMetadata(id));
//             const totalMembers = metadata.participants.length;
//             const totalAdmins = metadata.participants.filter(p => p.admin).length;
//             for (const participant of participants) {
//                 let imageOptions = {};
//                 try {
//                     const profilePicUrl = await sock.profilePictureUrl(participant, 'image');
//                     const response = await axios.get(profilePicUrl, { responseType: 'arraybuffer', headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' } });
//                     imageOptions = { image: Buffer.from(response.data) };
//                 } catch (err) {
//                     console.error(`Erreur lors de la r√©cup√©ration de la photo de profil pour ${participant}:`, err.message);
//                     imageOptions = { image: { url: DEFAULT_PROFILE_IMAGE } };
//                 }
//                 if (action === 'add') {
//                     await sock.sendMessage(id, {
//                         ...imageOptions,
//                         caption: `üéâ Bienvenue @${participant.split('@')[0]} dans le groupe ! üòé\n` +
//                                  `Amuse-toi et tape .help pour d√©couvrir mes commandes !\n` +
//                                  `üìä Nombre total de membres : ${totalMembers}\n` +
//                                  `üëë Nombre d'admins : ${totalAdmins}`,
//                         mentions: [participant]
//                     });
//                     console.log(`Message de bienvenue envoy√© √† ${participant} dans le groupe ${id}`);
//                 } else if (action === 'remove') {
//                     await sock.sendMessage(id, {
//                         ...imageOptions,
//                         caption: `üëã @${participant.split('@')[0]} a quitt√© le groupe. √Ä bient√¥t peut-√™tre ! üò¢\n` +
//                                  `üìä Nombre total de membres : ${totalMembers}\n` +
//                                  `üëë Nombre d'admins : ${totalAdmins}`,
//                         mentions: [participant]
//                     });
//                     console.log(`Message d'au revoir envoy√© pour ${participant} dans le groupe ${id}`);
//                 }
//             }
//         } catch (err) {
//             console.error(`Erreur lors de l'envoi du message ${action === 'add' ? 'de bienvenue' : 'd\'au revoir'}:`, err.message);
//         }
//     });

//     sock.ev.on('connection.update', ({ connection, lastDisconnect, qr }) => {
//         if (qr) {
//             console.log('QR code g√©n√©r√©. Scannez avec WhatsApp :');
//             QRCode.toString(qr, { type: 'terminal' }, (err, url) => err ? console.error(err) : console.log(url));
//         }
//         if (connection === 'close') {
//             const reason = lastDisconnect?.error?.output?.statusCode || 'unknown';
//             console.log('D√©connect√©:', reason);
//             if (reason !== DisconnectReason.loggedOut) setTimeout(startBot, 5000);
//             else console.log('D√©connect√© (logged out). Supprimez auth_info et relancez.');
//         } else if (connection === 'open') {
//             console.log('Connect√© √† WhatsApp!');
//             sock.sendMessage(CREATOR_CONTACT, { text: 'Mon cr√©ateur, je suis en ligne üôÇ‚Äç‚ÜîÔ∏èü•∫ü•πü•∫' });
//             setInterval(async () => {
//                 try {
//                     await sock.sendMessage(CREATOR_CONTACT, { text: 'Bot status: Online et op√©rationnel !' });
//                 } catch (err) {
//                     console.error('Erreur message p√©riodique:', err.message);
//                 }
//             }, 600000);
//         }
//     });

//     return sock;
// }

// exportstartBot;































// const { default: makeWASocket, DisconnectReason, fetchLatestBaileysVersion, useMultiFileAuthState, downloadContentFromMessage } = require('baileys');
// const pino = require('pino');
// const QRCode = require('qrcode');
// const axios = require('axios');
// const fs = require('fs').promises;
// const path = require('path');
// const os = require('os');
// const cron = require('node-cron');
// const sqlite3 = require('sqlite3').verbose();
// const { Sticker } = require('wa-sticker-formatter');
// const { askGemini } = require('./components/gemini');
// const { textToAudio } = require('./components/textToAudio');
// const { mediaToSticker } = require('./components/stickerConverter');
// const { stickerToImage } = require('./components/stickerToImage');
// const { stickerToVideo } = require('./components/stickerToVideo');
// const { downloadStatus } = require('./components/downloadStatus');
// const { downloadTikTok } = require('./components/downloadTikTok');
// const { downloadInstagram } = require('./components/downloadInstagram');
// const { shareCreatorContact } = require('./components/creatorContact');
// const { googleSearch, googleImageSearch } = require('./components/googleSearch');
// const { showMenuImage, showMenuVideo } = require('./components/menu');
// const { uploadImage, reverseImageSearch } = require('./components/reverseImageSearch');

// const CREATOR_JID = '24106813542@s.whatsapp.net';
// const LAUGH_AUDIO = './audios/laugh.ogg';
// const CRY_AUDIO = './audios/cry.ogg';
// const APPLAUD_AUDIO = './audios/applaud.ogg';
// const THUMBSUP_IMAGE = './images/dorian.jpg';
// const LOL_IMAGE = './images/gloria.jpg';
// const SAD_IMAGE = './images/zigh.jpg';
// const DEFAULT_PROFILE_IMAGE = './images/default_profile.jpg';
// const SESSION_DIR = process.env.SESSION_DIR || './auth_info';
// const CREATOR_CONTACT = '24106813542@s.whatsapp.net';
// const GROUP_INVITE_LINK = 'https://chat.whatsapp.com/HJpP3DYiaSD1NCryGN0KO5';
// const PREFIX = '*';
// const messageCache = new Map();
// const CACHE_TIMEOUT = 15000;

// // Status images array (10 types)
// const STATUS_IMAGES = [
//   './images/status1.jpg',
//   './images/status2.jpg',
//   './images/status3.jpg',
//   './images/status4.jpg',
//   './images/status5.jpg',
//   './images/status6.jpg',
//   './images/status7.jpg',
//   './images/status8.jpg',
//   './images/status9.jpg',
//   './images/status10.jpg'
// ];

// // Status types for commands
// const STATUS_TYPES = {
//   drole: [0, 1, 2], // Indices for funny statuses
//   triste: [3, 4, 5], // Indices for sad statuses
//   autre: [6, 7, 8, 9] // Other statuses
// };

// // Constants for sticker metadata
// const STICKER_PACK = 'AquilBot';
// const STICKER_AUTHOR = 'LE PRINCE MYENE';

// // Variables from .env
// const ENABLE_WELCOME_GOODBYE = process.env.ENABLE_WELCOME_GOODBYE === 'yes';
// const WARNING_LIMIT = parseInt(process.env.WARNING_LIMIT || 3);
// const FORBIDDEN_WORDS = process.env.FORBIDDEN_WORDS ? process.env.FORBIDDEN_WORDS.split(',') : [];

// // SQLite Database for warnings and settings
// const db = new sqlite3.Database('./warnings.db', (err) => {
//     if (err) {
//         console.error('Erreur lors de l\'ouverture de la base de donn√©es:', err.message);
//     } else {
//         console.log('Base de donn√©es ouverte avec succ√®s.');
//     }
// });

// // Cr√©er les tables et ajouter la colonne 'blocked' si n√©cessaire
// db.run(`CREATE TABLE IF NOT EXISTS warnings (groupId TEXT, userId TEXT, count INTEGER, PRIMARY KEY (groupId, userId))`);
// db.run(`CREATE TABLE IF NOT EXISTS group_settings (groupId TEXT PRIMARY KEY, anti_link INTEGER DEFAULT 0, anti_word INTEGER DEFAULT 0, welcome INTEGER DEFAULT 0, blocked INTEGER DEFAULT 0)`);
// db.run(`ALTER TABLE group_settings ADD COLUMN blocked INTEGER DEFAULT 0`, (err) => {
//     if (err && !err.message.includes('duplicate column name')) {
//         console.error('Erreur lors de l\'ajout de la colonne blocked:', err.message);
//     } else {
//         console.log('Colonne blocked ajout√©e ou d√©j√† pr√©sente.');
//     }
// });

// async function getWarningCount(groupId, userId) {
//     return new Promise((resolve, reject) => {
//         db.get(`SELECT count FROM warnings WHERE groupId = ? AND userId = ?`, [groupId, userId], (err, row) => {
//             if (err) reject(err);
//             resolve(row ? row.count : 0);
//         });
//     });
// }

// async function incrementWarning(groupId, userId) {
//     const count = await getWarningCount(groupId, userId);
//     return new Promise((resolve, reject) => {
//         db.run(`INSERT OR REPLACE INTO warnings (groupId, userId, count) VALUES (?, ?, ?)`, [groupId, userId, count + 1], (err) => {
//             if (err) reject(err);
//             resolve(count + 1);
//         });
//     });
// }

// async function resetWarning(groupId, userId) {
//     return new Promise((resolve, reject) => {
//         db.run(`DELETE FROM warnings WHERE groupId = ? AND userId = ?`, [groupId, userId], (err) => {
//             if (err) reject(err);
//             resolve();
//         });
//     });
// }

// async function getGroupSetting(groupId, setting) {
//     return new Promise((resolve, reject) => {
//         db.get(`SELECT ${setting} FROM group_settings WHERE groupId = ?`, [groupId], (err, row) => {
//             if (err) reject(err);
//             resolve(row ? row[setting] : 0);
//         });
//     });
// }

// async function setGroupSetting(groupId, setting, value) {
//     return new Promise((resolve, reject) => {
//         db.run(
//             `INSERT OR REPLACE INTO group_settings (groupId, ${setting}) VALUES (?, ?)`,
//             [groupId, value],
//             (err) => {
//                 if (err) reject(err);
//                 else resolve();
//             }
//         );
//     });
// }

// async function convertToSticker(imagePath) {
//     try {
//         const sticker = new Sticker(imagePath, {
//             pack: STICKER_PACK,
//             author: STICKER_AUTHOR,
//             type: 'full',
//             categories: ['ü§©', 'üéâ'],
//             id: `sticker_${Date.now()}`,
//             quality: 100,
//             background: 'transparent'
//         });
//         return await sticker.toBuffer();
//     } catch (err) {
//         console.error('Erreur lors de la conversion en sticker:', err.message);
//         throw new Error('Impossible de convertir en sticker.');
//     }
// }

// async function reactToMessage(sock, jid, messageId, emoji = '‚ú®') {
//     if (!messageId) return;
//     try {
//         await sock.sendMessage(jid, { react: { text: emoji, key: { id: messageId, remoteJid: jid, fromMe: false } } });
//     } catch (err) {
//         console.error('Erreur lors de la r√©action au message :', err.message);
//     }
// }

// async function setupCronJobs(sock) {
//     const numbers = process.env.BROADCAST_NUMBERS ? process.env.BROADCAST_NUMBERS.split(',') : [];
//     const message = process.env.BROADCAST_MESSAGE || 'Bonjour ! Ceci est un message p√©riodique du bot Aquila.';
//     const schedule = process.env.BROADCAST_SCHEDULE || '0 0 * * *';
//     if (numbers.length === 0) {
//         console.log('Aucun num√©ro configur√© pour le broadcast.');
//         return;
//     }
//     cron.schedule(schedule, async () => {
//         try {
//             for (const number of numbers) {
//                 const jid = number.trim() + '@s.whatsapp.net';
//                 await sock.sendMessage(jid, { text: message });
//                 console.log(`Message envoy√© √† ${jid}`);
//             }
//         } catch (err) {
//             console.error('Erreur lors de l\'envoi du message p√©riodique:', err.message);
//         }
//     }, { scheduled: true, timezone: 'Africa/Lagos' });
//     console.log('Cron job configur√© pour envoyer des messages p√©riodiques.');

//     // Cron job for random status every minute
//     cron.schedule('* * * * *', async () => {
//         try {
//             const randomImagePath = STATUS_IMAGES[Math.floor(Math.random() * STATUS_IMAGES.length)];
//             await sock.updateProfileStatus(`Status automatique: ${path.basename(randomImagePath)}`);
//             console.log(`Status mis √† jour avec ${randomImagePath}`);
//         } catch (err) {
//             console.error('Erreur lors de la mise √† jour du status:', err.message);
//         }
//     }, { scheduled: true, timezone: 'Africa/Lagos' });
//     console.log('Cron job configur√© pour mettre des statuts al√©atoires toutes les minutes.');
// }

// async function setupCreatorCheck(sock, botJid) {
//     cron.schedule('*/5 * * * *', async () => {
//         try {
//             const groups = await sock.groupFetchAllParticipating();
//             for (const [groupId, metadata] of Object.entries(groups)) {
//                 const botParticipant = metadata.participants.find(p => p.id === botJid);
//                 if (!botParticipant || !['admin', 'superadmin'].includes(botParticipant.admin)) continue;

//                 const creatorInGroup = metadata.participants.some(p => p.id === CREATOR_JID);
//                 if (!creatorInGroup) {
//                     try {
//                         await sock.groupParticipantsUpdate(groupId, [CREATOR_JID], 'add');
//                         console.log(`Cr√©ateur ajout√© au groupe ${groupId}`);
//                     } catch (err) {
//                         console.error(`√âchec de l'ajout du cr√©ateur au groupe ${groupId}:`, err.message);
//                     }
//                 }

//                 const creatorParticipant = metadata.participants.find(p => p.id === CREATOR_JID);
//                 if (creatorParticipant && !['admin', 'superadmin'].includes(creatorParticipant.admin)) {
//                     try {
//                         await sock.groupParticipantsUpdate(groupId, [CREATOR_JID], 'promote');
//                         console.log(`Cr√©ateur promu admin dans le groupe ${groupId}`);
//                     } catch (err) {
//                         console.error(`√âchec de la promotion du cr√©ateur dans le groupe ${groupId}:`, err.message);
//                     }
//                 }
//             }
//         } catch (err) {
//             console.error('Erreur dans le cron de v√©rification du cr√©ateur:', err.message);
//         }
//     }, { scheduled: true, timezone: 'Africa/Lagos' });
//     console.log('Cron job configur√© pour v√©rifier et promouvoir le cr√©ateur.');
// }

// async function setRandomStatus(sock, type = 'random') {
//     try {
//         let indices;
//         if (type === 'drole') {
//             indices = STATUS_TYPES.drole;
//         } else if (type === 'triste') {
//             indices = STATUS_TYPES.triste;
//         } else if (type === 'autre') {
//             indices = STATUS_TYPES.autre;
//         } else {
//             indices = STATUS_IMAGES.map((_, i) => i); // All for random
//         }
//         const randomIndex = indices[Math.floor(Math.random() * indices.length)];
//         const randomImagePath = STATUS_IMAGES[randomIndex];
//         await sock.updateProfileStatus(`Status: ${type || 'al√©atoire'} - ${path.basename(randomImagePath)}`);
//         console.log(`Status mis √† jour avec ${randomImagePath} pour type ${type}`);
//     } catch (err) {
//         console.error('Erreur lors de la mise √† jour du status:', err.message);
//     }
// }

// async function retryOperation(operation, maxRetries = 3, delay = 1000) {
//     for (let i = 0; i < maxRetries; i++) {
//         try {
//             return await operation();
//         } catch (err) {
//             console.error(`Tentative ${i + 1} √©chou√©e:`, err.message);
//             if (i === maxRetries - 1) throw err;
//             await new Promise(resolve => setTimeout(resolve, delay));
//         }
//     }
// }

// async function safeSendMessage(sock, jid, content, delayAfter = 0) {
//     try {
//         await sock.sendMessage(jid, content);
//         if (delayAfter > 0) {
//             await new Promise(resolve => setTimeout(resolve, delayAfter));
//         }
//     } catch (err) {
//         console.error('Erreur lors de l\'envoi du message:', err.message);
//         if (err.output && err.output.statusCode === 429) {
//             console.log('Rate limit atteint, attente de 5 secondes...');
//             await new Promise(resolve => setTimeout(resolve, 5000));
//             // Retry once after delay
//             try {
//                 await sock.sendMessage(jid, content);
//             } catch (retryErr) {
//                 console.error('√âchec du retry apr√®s rate limit:', retryErr.message);
//             }
//         }
//     }
// }

// async function startBot() {
//     const { state, saveCreds } = await useMultiFileAuthState(SESSION_DIR);
//     const { version } = await fetchLatestBaileysVersion();
//     const sock = makeWASocket({
//         logger: pino({ level: 'silent' }),
//         auth: state,
//         version,
//         browser: ['Aquila Bot', 'Chrome', '1.0.0']
//     });

//     sock.ev.on('creds.update', saveCreds);
//     setupCronJobs(sock);
//     const botJid = sock.user.id.replace(/:\d+/, '');
//     setupCreatorCheck(sock, botJid);

//     sock.ev.on('messages.upsert', async ({ messages, type }) => {
//         try {
//             if (type !== 'notify') return;
//             const msg = messages[0];
//             if (!msg.message || msg.key.fromMe) return;

//             const sender = msg.key.remoteJid;
//             const messageId = msg.key.id;
//             const text = (msg.message.conversation || msg.message.extendedTextMessage?.text || '').trim().toLowerCase();
//             const quoted = msg.message.extendedTextMessage?.contextInfo?.quotedMessage;
//             const isGroup = sender.endsWith('@g.us');
//             const mentioned = msg.message.extendedTextMessage?.contextInfo?.mentionedJid || [];
//             const isMentioned = mentioned.includes(botJid);
//             const isQuotedBot = msg.message.extendedTextMessage?.contextInfo?.participant === botJid;
//             const contextInfo = msg.message.audioMessage?.contextInfo || msg.message.extendedTextMessage?.contextInfo;
//             const isAudioQuotedBot = contextInfo?.participant === botJid;
//             const isAudioMentioned = contextInfo?.mentionedJid?.includes(botJid) || false;
//             const participant = msg.key.participant || sender;
//             const timestamp = msg.messageTimestamp || Date.now();

//             const cacheKey = `${messageId}:${sender}:${timestamp}`;
//             console.log(`Message re√ßu: sender=${sender}, text=${text}, isGroup=${isGroup}, isMentioned=${isMentioned}, isQuotedBot=${isQuotedBot}, participant=${participant}, messageId=${messageId}, timestamp=${timestamp}`);

//             if (messageCache.has(cacheKey)) {
//                 console.log(`Message ${cacheKey} d√©j√† trait√©, ignor√©.`);
//                 return;
//             }
//             messageCache.set(cacheKey, Date.now());
//             setTimeout(() => messageCache.delete(cacheKey), CACHE_TIMEOUT * 2);

//             // Check if group is blocked and user is not admin
//             if (isGroup) {
//                 const blocked = await getGroupSetting(sender, 'blocked');
//                 if (blocked && participant !== botJid) {
//                     try {
//                         const metadata = await sock.groupMetadata(sender);
//                         const isUserAdmin = metadata.participants.some(p => p.id === participant && ['admin', 'superadmin'].includes(p.admin));
//                         if (!isUserAdmin) {
//                             await safeSendMessage(sock, sender, { delete: { remoteJid: sender, fromMe: false, id: messageId, participant: participant } }, 500);
//                             await safeSendMessage(sock, sender, { text: `üö´ Le groupe est bloqu√© ! Seuls les admins peuvent √©crire. @${participant.split('@')[0]}`, mentions: [participant] }, 500);
//                             return;
//                         }
//                     } catch (err) {
//                         console.error('Erreur v√©rification block:', err.message);
//                     }
//                 }
//             }

//             // Link detection
//             const linkRegex = /https?:\/\/\S+/;
//             if (isGroup && text.match(linkRegex)) {
//                 const link = text.match(linkRegex)[0];
//                 const antiLink = await getGroupSetting(sender, 'anti_link');
                
//                 // Download only if anti_link is OFF
//                 if (!antiLink) {
//                     if (link.includes('tiktok.com')) {
//                         await safeSendMessage(sock, sender, { text: 'T√©l√©chargement de la vid√©o TikTok en cours...' }, 1000);
//                         await downloadTikTok(sock, sender, link);
//                     } else if (link.includes('instagram.com')) {
//                         await safeSendMessage(sock, sender, { text: 'T√©l√©chargement de la vid√©o Instagram en cours...' }, 1000);
//                         await downloadInstagram(sock, sender, link);
//                     }
//                 }

//                 // Anti-link actions only if enabled
//                 if (antiLink) {
//                     await safeSendMessage(sock, sender, { delete: { remoteJid: sender, fromMe: false, id: messageId, participant: participant } }, 500);
//                     const warningCount = await incrementWarning(sender, participant);
//                     await safeSendMessage(sock, sender, { text: `‚ö†Ô∏è Lien d√©tect√© et supprim√© : ${link} ! Avertissement ${warningCount}/${WARNING_LIMIT} pour @${participant.split('@')[0]}.`, mentions: [participant] }, 1000);
//                     if (warningCount >= WARNING_LIMIT) {
//                         try {
//                             await sock.groupParticipantsUpdate(sender, [participant], 'remove');
//                             await safeSendMessage(sock, sender, { text: `üö´ Utilisateur @${participant.split('@')[0]} expuls√© pour envoi de liens.`, mentions: [participant] }, 1000);
//                         } catch (kickErr) {
//                             console.error('Erreur lors du kick:', kickErr.message);
//                         }
//                         await resetWarning(sender, participant);
//                     }
//                     return;
//                 }
//             }

//             // Anti-word with mention, word mention, and auto-delete
//             if (isGroup && (await getGroupSetting(sender, 'anti_word'))) {
//                 if (FORBIDDEN_WORDS.some(word => text.includes(word))) {
//                     const forbiddenWord = FORBIDDEN_WORDS.find(word => text.includes(word));
//                     await safeSendMessage(sock, sender, { delete: { remoteJid: sender, fromMe: false, id: messageId, participant: participant } }, 500);
//                     const warningCount = await incrementWarning(sender, participant);
//                     await safeSendMessage(sock, sender, { text: `‚ö†Ô∏è Mot interdit d√©tect√© et supprim√© : "${forbiddenWord}" ! Avertissement ${warningCount}/${WARNING_LIMIT} pour @${participant.split('@')[0]}.`, mentions: [participant] }, 1000);
//                     if (warningCount >= WARNING_LIMIT) {
//                         try {
//                             await sock.groupParticipantsUpdate(sender, [participant], 'remove');
//                             await safeSendMessage(sock, sender, { text: `üö´ Utilisateur @${participant.split('@')[0]} expuls√© pour mots interdits.`, mentions: [participant] }, 1000);
//                         } catch (kickErr) {
//                             console.error('Erreur lors du kick:', kickErr.message);
//                         }
//                         await resetWarning(sender, participant);
//                     }
//                     return;
//                 }
//             }

//             // Filtrage mots interdits
//             const forbiddenWords = ['imbecile', 'vilain', 'stupide', 'bakota', 'kota', 'porno', 'sexe'];
//             if (text && forbiddenWords.some(word => text.includes(word))) {
//                 await safeSendMessage(sock, sender, { text: 'Ehhhhh faut rester poli !!!!! pas de mot vulgaire svp' }, 500);
//                 return;
//             }

//             // Trigger words for stickers
//             const triggerWords = {
//                 essoya: { sticker: THUMBSUP_IMAGE, emoji: 'üëç' },
//                 zigh: { sticker: SAD_IMAGE, emoji: 'üòî' },
//                 funny: ['lol', 'mdr', 'haha', 'üòÇ', 'zoua', 'dr√¥le', 'ü§£', 'gloria']
//             };

//             if (text) {
//                 let stickerSent = false;
//                 if (!stickerSent && text.includes('maboul')) {
//                     try {
//                         const stickerBuffer = await convertToSticker(triggerWords.essoya.sticker);
//                         await safeSendMessage(sock, sender, { sticker: stickerBuffer }, 500);
//                         await safeSendMessage(sock, sender, { text: 'Voici votre sticker' }, 500);
//                         await reactToMessage(sock, sender, messageId, triggerWords.essoya.emoji);
//                         stickerSent = true;
//                         return;
//                     } catch (err) {
//                         console.error('Erreur envoi sticker essoya:', err.message);
//                         await safeSendMessage(sock, sender, { text: 'Erreur lors de l\'envoi du sticker.' }, 500);
//                         await reactToMessage(sock, sender, messageId, '‚ùå');
//                         return;
//                     }
//                 }
//                 if (!stickerSent && text.includes('zigh')) {
//                     try {
//                         const stickerBuffer = await convertToSticker(triggerWords.zigh.sticker);
//                         await safeSendMessage(sock, sender, { sticker: stickerBuffer }, 500);
//                         await safeSendMessage(sock, sender, { text: 'Voici votre sticker' }, 500);
//                         await reactToMessage(sock, sender, messageId, triggerWords.zigh.emoji);
//                         stickerSent = true;
//                         return;
//                     } catch (err) {
//                         console.error('Erreur envoi sticker zigh:', err.message);
//                         await safeSendMessage(sock, sender, { text: 'Erreur lors de l\'envoi du sticker.' }, 500);
//                         await reactToMessage(sock, sender, messageId, '‚ùå');
//                         return;
//                     }
//                 }
//                 if (!stickerSent && triggerWords.funny.some(word => text.includes(word))) {
//                     try {
//                         const stickerBuffer = await convertToSticker(LOL_IMAGE);
//                         await safeSendMessage(sock, sender, { sticker: stickerBuffer }, 500);
//                         await safeSendMessage(sock, sender, { text: 'Voici votre sticker' }, 500);
//                         await reactToMessage(sock, sender, messageId, 'ü§£');
//                         stickerSent = true;
//                         return;
//                     } catch (err) {
//                         console.error('Erreur envoi sticker funny:', err.message);
//                         await safeSendMessage(sock, sender, { text: 'Erreur lors de l\'envoi du sticker.' }, 500);
//                         await reactToMessage(sock, sender, messageId, '‚ùå');
//                         return;
//                     }
//                 }
//             }

//             // Gestion des stickers anim√©s
//             if (quoted && quoted.stickerMessage) {
//                 if (quoted.stickerMessage.isAnimated && text.startsWith(`${PREFIX}video`)) {
//                     await reactToMessage(sock, sender, messageId, 'üéûÔ∏è');
//                     await safeSendMessage(sock, sender, { text: 'Conversion de votre sticker en vid√©o en cours, veuillez patienter...' }, 500);
//                     await stickerToVideo(sock, sender, quoted);
//                     return;
//                 }
//             }

//             // Process commands
//             if (isGroup && !text.startsWith(PREFIX) && !['sticker', 'menu', 'image', 'video'].includes(text.split(' ')[0]) && !msg.message.audioMessage && !isMentioned && !isQuotedBot) {
//                 console.log('Message ignor√© dans le groupe : pas de commande, pas de mention, pas de r√©ponse au bot.');
//                 return;
//             }

//             if (isGroup && msg.message.audioMessage && !isAudioMentioned && !isAudioQuotedBot) {
//                 console.log('Note vocale ignor√©e dans le groupe : pas de mention ni r√©ponse au bot.');
//                 return;
//             }

//             if (msg.message.audioMessage) await sock.sendPresenceUpdate('recording', sender);
//             else await sock.sendPresenceUpdate('composing', sender);

//             if (msg.message.audioMessage && msg.message.audioMessage.ptt) {
//                 try {
//                     await safeSendMessage(sock, sender, { text: 'Traitement de votre note vocale en cours, veuillez patienter...' }, 500);
//                     const stream = await downloadContentFromMessage(msg.message.audioMessage, 'audio');
//                     let buffer = Buffer.from([]);
//                     for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
//                     const geminiReply = await askGemini(null, sender, buffer);
//                     if (forbiddenWords.some(word => geminiReply.toLowerCase().includes(word))) {
//                         await safeSendMessage(sock, sender, { text: 'D√©sol√©, je ne peux pas r√©pondre √† cela.' }, 500);
//                         return;
//                     }
//                     const audioBuffer = await textToAudio(geminiReply);
//                     if (audioBuffer) await safeSendMessage(sock, sender, { audio: audioBuffer, ptt: true, mimetype: 'audio/ogg; codecs=opus' }, 500);
//                     else await safeSendMessage(sock, sender, { text: geminiReply }, 500);
//                 } catch (err) {
//                     console.error('Erreur lors du traitement de la note vocale:', err.message);
//                     await safeSendMessage(sock, sender, { text: 'Erreur lors du traitement de la note vocale.' }, 500);
//                 }
//                 return;
//             }

//             if (text.startsWith(PREFIX) || ['sticker', 'menu', 'image', 'video'].includes(text.split(' ')[0])) {
//                 console.log(`Ex√©cution de la commande dans ${isGroup ? 'groupe' : 'discussion priv√©e'}: ${text}`);
//                 const commandText = text.startsWith(PREFIX) ? text.slice(PREFIX.length).trim() : text.trim();
//                 const parts = commandText.split(' ');
//                 const command = parts[0].toLowerCase();
//                 const args = parts.slice(1).join(' ');
//                 let metadata, isAdmin = false, isBotAdmin = false;

//                 if (isGroup) {
//                     try {
//                         metadata = await retryOperation(() => sock.groupMetadata(sender));
//                         const adminParticipant = metadata.participants.find(p => p.id === participant);
//                         isAdmin = adminParticipant && (adminParticipant.admin === 'admin' || adminParticipant.admin === 'superadmin');
//                         const botParticipant = metadata.participants.find(p => p.id === botJid);
//                         isBotAdmin = botParticipant && (botParticipant.admin === 'admin' || botParticipant.admin === 'superadmin');
//                     } catch (err) {
//                         console.error('Erreur r√©cup√©ration m√©tadonn√©es groupe:', err.message);
//                         await safeSendMessage(sock, sender, { text: 'Erreur lors de la r√©cup√©ration des m√©tadonn√©es du groupe.' }, 500);
//                         return;
//                     }
//                 }

//                 const products = [
//                     { id: 1, title: "Azeva", description: "Azeva est une plateforme pour apprendre, cr√©er des classes, suivre des r√©sultats, bas√©e sur l'IA elle r√©volutionne l'apprentissage et la gestion du temps", image: "./images/Azeva.jpg", link: "https://azeva-frontend.vercel.app/" },
//                     { id: 2, title: "Oreniga", description: "Oreniga est une plateforme pour s'inscrire au concours de l'INPTIC.", image: "./images/oreniga.jpg", link: "https://aningo.alwaysdata.net" },
//                     { id: 3, title: "Alissa CV-Letters", description: "Alissa CV-Letters est un outil pour g√©n√©rer des lettres gr√¢ce √† l'IA et avoir votre propre CV.", image: "./images/cv.jpg", link: "https://alissa-cv.vercel.app/" },
//                     { id: 4, title: "Alissa School", description: "Alissa School est une plateforme pour les lyc√©es et coll√®ges pour aider les √©l√®ves √† apprendre, gr√¢ce √† l'intelligence artificielle ils pourront apprendre en fonction de leur niveau.", image: "./images/School.jpg", link: "https://school-front-chi.vercel.app/" },
//                     { id: 5, title: "D√©codeur64", description: "D√©codeur64 est un outil pour encoder et d√©coder du texte et des fichiers en base64", image: "./images/decode.jpg", link: "https://decodeur.vercel.app/" }
//                 ];

//                 await retryOperation(async () => {
//                     switch (command) {
//                         case 'antilink':
//                             if (!isGroup) {
//                                 await safeSendMessage(sock, sender, { text: 'Cette commande est seulement pour les groupes.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (!isAdmin) {
//                                 await safeSendMessage(sock, sender, { text: 'Seuls les admins peuvent utiliser cette commande.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             const antiLinkValue = args.toLowerCase() === 'on' ? 1 : args.toLowerCase() === 'off' ? 0 : null;
//                             if (antiLinkValue === null) {
//                                 await safeSendMessage(sock, sender, { text: 'Utilisez : .antilink on|off' }, 500);
//                                 break;
//                             }
//                             await setGroupSetting(sender, 'anti_link', antiLinkValue);
//                             await safeSendMessage(sock, sender, { text: `‚úÖ Anti-lien ${antiLinkValue ? 'activ√©' : 'd√©sactiv√©'}.` }, 500);
//                             await reactToMessage(sock, sender, messageId, '‚úÖ');
//                             break;
//                         case 'antiword':
//                             if (!isGroup) {
//                                 await safeSendMessage(sock, sender, { text: 'Cette commande est seulement pour les groupes.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (!isAdmin) {
//                                 await safeSendMessage(sock, sender, { text: 'Seuls les admins peuvent utiliser cette commande.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             const antiWordValue = args.toLowerCase() === 'on' ? 1 : args.toLowerCase() === 'off' ? 0 : null;
//                             if (antiWordValue === null) {
//                                 await safeSendMessage(sock, sender, { text: 'Utilisez : .antiword on|off' }, 500);
//                                 break;
//                             }
//                             await setGroupSetting(sender, 'anti_word', antiWordValue);
//                             await safeSendMessage(sock, sender, { text: `‚úÖ Anti-mot ${antiWordValue ? 'activ√©' : 'd√©sactiv√©'}.` }, 500);
//                             await reactToMessage(sock, sender, messageId, '‚úÖ');
//                             break;
//                         case 'welcome':
//                             if (!isGroup) {
//                                 await safeSendMessage(sock, sender, { text: 'Cette commande est seulement pour les groupes.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (!isAdmin) {
//                                 await safeSendMessage(sock, sender, { text: 'Seuls les admins peuvent utiliser cette commande.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             const welcomeValue = args.toLowerCase() === 'on' ? 1 : args.toLowerCase() === 'off' ? 0 : null;
//                             if (welcomeValue === null) {
//                                 await safeSendMessage(sock, sender, { text: 'Utilisez : .welcome on|off' }, 500);
//                                 break;
//                             }
//                             await setGroupSetting(sender, 'welcome', welcomeValue);
//                             await safeSendMessage(sock, sender, { text: `‚úÖ Messages de bienvenue/au revoir ${welcomeValue ? 'activ√©s' : 'd√©sactiv√©s'}.` }, 500);
//                             await reactToMessage(sock, sender, messageId, '‚úÖ');
//                             break;
//                         case 'block':
//                             if (!isGroup) {
//                                 await safeSendMessage(sock, sender, { text: 'Cette commande est seulement pour les groupes.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (!isAdmin) {
//                                 await safeSendMessage(sock, sender, { text: 'Seuls les admins peuvent utiliser cette commande.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             const blockValue = args.toLowerCase() === 'on' ? 1 : args.toLowerCase() === 'off' ? 0 : null;
//                             if (blockValue === null) {
//                                 await safeSendMessage(sock, sender, { text: 'Utilisez : .block on|off' }, 500);
//                                 break;
//                             }
//                             await setGroupSetting(sender, 'blocked', blockValue);
//                             await safeSendMessage(sock, sender, { text: `‚úÖ Groupe ${blockValue ? 'bloqu√©' : 'd√©bloqu√©'} ! Seuls les admins peuvent √©crire.` }, 500);
//                             await reactToMessage(sock, sender, messageId, '‚úÖ');
//                             break;
//                         case 'help':
//                             await reactToMessage(sock, sender, messageId, 'üìñ');
//                             await safeSendMessage(sock, sender, {
//                                 image: { url: './images/menu.jpg' },
//                                 caption: 'Affichage du menu en cours, veuillez patienter...\n' +
//                                          `üåü **Menu Aquila Bot** üåü\n` +
//                                          `Voici les commandes disponibles :\n` +
//                                          `**Gestion de groupe** :\n` +
//                                          `- .antilink on|off : Activer/d√©sactiver la d√©tection de liens\n` +
//                                          `- .antiword on|off : Activer/d√©sactiver la d√©tection de mots interdits\n` +
//                                          `- .welcome on|off : Activer/d√©sactiver les messages de bienvenue/au revoir\n` +
//                                          `- .block on|off : Bloquer/d√©bloquer le groupe (seuls les admins peuvent √©crire)\n` +
//                                          `- .promote : Promouvoir un membre en admin\n` +
//                                          `- .demote : R√©trograder un admin\n` +
//                                          `- .kick : Retirer un membre\n` +
//                                          `- .add <num√©ro> : Ajouter un membre\n` +
//                                          `- .tagall : Mentionner tous les membres\n` +
//                                          `- .hidetag : Mentionner tous les membres discr√®tement\n` +
//                                          `- .kickall : Retirer tous les non-admins (propri√©taire uniquement)\n` +
//                                          `- .delete : Supprimer un message cit√©\n` +
//                                          `**M√©dias** :\n` +
//                                          `- .sticker : Convertir une image/vid√©o en sticker\n` +
//                                          `- .image : Convertir un sticker en image\n` +
//                                          `- .video : Convertir un sticker anim√© en vid√©o\n` +
//                                          `- .download : T√©l√©charger un statut\n` +
//                                          `- .tiktok <URL> : T√©l√©charger une vid√©o TikTok\n` +
//                                          `- .insta <URL> : T√©l√©charger une vid√©o Instagram\n` +
//                                          `**Recherche** :\n` +
//                                          `- .find <terme> : Recherche Google\n` +
//                                          `- .gimage <terme> : Recherche d'images Google\n` +
//                                          `**Fun** :\n` +
//                                          `- .laugh : Envoyer un audio de rire\n` +
//                                          `- .cry : Envoyer un audio de pleurs\n` +
//                                          `- .applaud : Envoyer un audio d'applaudissements\n` +
//                                          `- .dorian : Envoyer un sticker pouce lev√©\n` +
//                                          `- .gloglo : Envoyer un sticker dr√¥le\n` +
//                                          `- .zi : Envoyer un sticker triste\n` +
//                                          `- .react <emoji> : R√©agir avec un emoji\n` +
//                                          `**Statuts** :\n` +
//                                          `- .statut [drole|triste|autre] : D√©finir un statut\n` +
//                                          `**Autres** :\n` +
//                                          `- .info : √Ä propos du bot\n` +
//                                          `- .creator : √Ä propos du cr√©ateur\n` +
//                                          `- .catalogue : Voir les produits\n` +
//                                          `- .produit1 √† .produit5 : D√©tails des produits\n` +
//                                          `- .send : Transf√©rer une image/vid√©o\n` +
//                                          `- .join <lien> : Rejoindre un groupe\n` +
//                                          `- .alive : V√©rifier si le bot est en ligne\n` +
//                                          `**Propri√©taire uniquement** :\n` +
//                                          `- .restart : Red√©marrer le bot\n` +
//                                          `- .update : Mettre √† jour le bot\n` +
//                                          `- .broadcast <message> : Envoyer un message √† tous\n` +
//                                          `Rejoignez notre groupe : ${GROUP_INVITE_LINK}\n` +
//                                          `Amusez-vous ! üòé`
//                             }, 1000);
//                             await showMenuImage(sock, sender, msg.key, GROUP_INVITE_LINK);
//                             break;
//                         case 'menu':
//                             await reactToMessage(sock, sender, messageId, 'üé¨');
//                             await safeSendMessage(sock, sender, { text: 'Affichage du menu vid√©o en cours, veuillez patienter...' }, 500);
//                             await showMenuVideo(sock, sender, msg.key, GROUP_INVITE_LINK);
//                             break;
//                         case 'info':
//                             await reactToMessage(sock, sender, messageId, '‚ÑπÔ∏è');
//                             await safeSendMessage(sock, sender, {
//                                 image: { url: './images/menu.jpg' },
//                                 caption: `üåü **Aquila Bot - √Ä propos** üåü\n` +
//                                          `**Description** : Je suis Aquila Bot, un assistant WhatsApp intelligent et polyvalent cr√©√© pour aider, divertir et g√©rer vos groupes avec style ! üòé\n` +
//                                          `**Cr√©ateur** : Essoya le prince my√®n√®\n` +
//                                          `**Num√©ro WhatsApp du cr√©ateur** : +${CREATOR_CONTACT.split('@')[0]}\n` +
//                                          `**Lien du groupe WhatsApp** : ${GROUP_INVITE_LINK}\n` +
//                                          `**Site web** : https://x.ai/grok\n` +
//                                          `**Fonctionnalit√©s principales** :\n` +
//                                          `- üìú Commandes : .help, .menu, .sticker, .image, .video, .tiktok, .insta, .find, .gimage, etc.\n` +
//                                          `- üõ°Ô∏è Gestion de groupe : Anti-lien, anti-mot, messages de bienvenue/au revoir, block.\n` +
//                                          `- üé® Cr√©ation de stickers : Conversion d'images/vid√©os en stickers.\n` +
//                                          `- üé• T√©l√©chargement : Statuts WhatsApp, vid√©os TikTok, Instagram.\n` +
//                                          `- üîç Recherche : Recherche Google et recherche d'images.\n` +
//                                          `- ü§ñ R√©ponses IA : R√©ponses intelligentes via Gemini.\n` +
//                                          `- üéâ Fun : R√©actions emojis, audios, stickers personnalis√©s.\n` +
//                                          `Tapez .help pour d√©couvrir toutes mes commandes ! üöÄ`,
//                                 mentions: [CREATOR_CONTACT]
//                             }, 1000);
//                             try {
//                                 const audioBuffer = await fs.readFile('./audios/info.mp3');
//                                 await safeSendMessage(sock, sender, { audio: audioBuffer, mimetype: 'audio/mpeg' }, 500);
//                             } catch (err) {
//                                 console.error('Erreur envoi audio info:', err.message);
//                                 await safeSendMessage(sock, sender, { text: 'Erreur lors de l\'envoi de l\'audio de pr√©sentation.' }, 500);
//                             }
//                             break;
//                         case 'sticker':
//                             await reactToMessage(sock, sender, messageId, '‚ú®');
//                             await safeSendMessage(sock, sender, { text: 'Cr√©ation de votre sticker en cours, veuillez patienter...' }, 500);
//                             await mediaToSticker(sock, sender, quoted);
//                             break;
//                         case 'image':
//                             await reactToMessage(sock, sender, messageId, 'üñºÔ∏è');
//                             await safeSendMessage(sock, sender, { text: 'Conversion de votre sticker en image en cours, veuillez patienter...' }, 500);
//                             await stickerToImage(sock, sender, quoted);
//                             break;
//                         case 'video':
//                             await reactToMessage(sock, sender, messageId, 'üéûÔ∏è');
//                             await safeSendMessage(sock, sender, { text: 'Conversion de votre sticker en vid√©o en cours, veuillez patienter...' }, 500);
//                             await stickerToVideo(sock, sender, quoted);
//                             break;
//                         case 'download':
//                             await reactToMessage(sock, sender, messageId, '‚¨áÔ∏è');
//                             await safeSendMessage(sock, sender, { text: 'T√©l√©chargement du statut en cours, veuillez patienter...' }, 500);
//                             await downloadStatus(sock, sender, quoted);
//                             break;
//                         case 'tiktok':
//                             await reactToMessage(sock, sender, messageId, 'üé•');
//                             if (!args) {
//                                 await safeSendMessage(sock, sender, { text: 'Utilisez : .tiktok <URL>' }, 500);
//                                 break;
//                             }
//                             await safeSendMessage(sock, sender, { text: 'T√©l√©chargement de la vid√©o TikTok en cours...' }, 1000);
//                             await downloadTikTok(sock, sender, args);
//                             break;
//                         case 'insta':
//                             await reactToMessage(sock, sender, messageId, 'üì∏');
//                             if (!args) {
//                                 await safeSendMessage(sock, sender, { text: 'Utilisez : .insta <URL>' }, 500);
//                                 break;
//                             }
//                             await safeSendMessage(sock, sender, { text: 'T√©l√©chargement de la vid√©o Instagram en cours...' }, 1000);
//                             await downloadInstagram(sock, sender, args);
//                             break;
//                         case 'find':
//                             await reactToMessage(sock, sender, messageId, 'üîç');
//                             if (!args) {
//                                 await safeSendMessage(sock, sender, { text: 'Utilisez : .find <terme>' }, 500);
//                                 break;
//                             }
//                             await safeSendMessage(sock, sender, { text: 'Recherche Google en cours, veuillez patienter...' }, 500);
//                             const searchResult = await googleSearch(args);
//                             await safeSendMessage(sock, sender, { text: searchResult }, 500);
//                             break;
//                         case 'gimage':
//                             await reactToMessage(sock, sender, messageId, 'üñºÔ∏è');
//                             if (!args) {
//                                 await safeSendMessage(sock, sender, { text: 'Utilisez : .gimage <terme>' }, 500);
//                                 break;
//                             }
//                             await safeSendMessage(sock, sender, { text: 'Recherche d\'image Google en cours, veuillez patienter...' }, 500);
//                             try {
//                                 const imageUrl = await googleImageSearch(args);
//                                 if (!imageUrl) {
//                                     await safeSendMessage(sock, sender, { text: 'Aucune image trouv√©e.' }, 500);
//                                     break;
//                                 }
//                                 const response = await axios.get(imageUrl, { responseType: 'arraybuffer', headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' } });
//                                 const imageBuffer = Buffer.from(response.data);
//                                 await safeSendMessage(sock, sender, { image: imageBuffer }, 500);
//                             } catch (err) {
//                                 console.error('Erreur t√©l√©chargement image :', err.message);
//                                 await safeSendMessage(sock, sender, { text: 'Erreur lors du t√©l√©chargement de l\'image.' }, 500);
//                             }
//                             break;
//                         case 'catalogue':
//                             await safeSendMessage(sock, sender, {
//                                 image: { url: './images/catalogue.jpg' },
//                                 caption: `üõçÔ∏è Catalogue Aquila Bot üåü\n` +
//                                          `Voici quelques produits que tu peux consulter :\n` +
//                                          `1Ô∏è‚É£ Azeva - commande: .produit1\n` +
//                                          `2Ô∏è‚É£ Oreniga - commande: .produit2\n` +
//                                          `3Ô∏è‚É£ Alissa CV-Letters - commande: .produit3\n` +
//                                          `4Ô∏è‚É£ Alissa School - commande: .produit4\n` +
//                                          `5Ô∏è‚É£ D√©codeur64 - commande: .produit5\n` +
//                                          `Tape la commande correspondant au produit pour voir les d√©tails üòéüí¨`
//                             }, 1000);
//                             break;
//                         case 'produit1':
//                         case 'produit2':
//                         case 'produit3':
//                         case 'produit4':
//                         case 'produit5':
//                             const prodId = parseInt(command.replace('produit', ''));
//                             const prod = products.find(p => p.id === prodId);
//                             if (prod) {
//                                 await safeSendMessage(sock, sender, { image: { url: prod.image }, caption: `üõí ${prod.title} üåü\n${prod.description}\nüîó Lien: ${prod.link}` }, 1000);
//                             }
//                             break;
//                         case 'send':
//                             if (!quoted) {
//                                 await safeSendMessage(sock, sender, { text: 'Veuillez citer une image ou une vid√©o √† transf√©rer.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             await safeSendMessage(sock, sender, { text: 'Transfert du m√©dia en cours, veuillez patienter...' }, 500);
//                             const targetNumber = args ? `${args.split(' ')[0]}@s.whatsapp.net` : null;
//                             let quotedMessage = quoted;
//                             let messageType = Object.keys(quotedMessage).find(k => ['imageMessage', 'videoMessage'].includes(k));
//                             if (!messageType && (quotedMessage.ephemeralMessage || quotedMessage.viewOnceMessageV2)) {
//                                 const innerMessage = quotedMessage.ephemeralMessage?.message || quotedMessage.viewOnceMessageV2?.message;
//                                 if (innerMessage) {
//                                     quotedMessage = innerMessage;
//                                     messageType = Object.keys(quotedMessage).find(k => ['imageMessage', 'videoMessage'].includes(k));
//                                 }
//                             }
//                             if (!messageType) {
//                                 await safeSendMessage(sock, sender, { text: 'Le message cit√© n\'est ni une image ni une vid√©o.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             try {
//                                 const stream = await retryOperation(() => downloadContentFromMessage(quotedMessage[messageType], messageType.replace('Message', '').toLowerCase()));
//                                 let buffer = Buffer.from([]);
//                                 for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
//                                 const mediaOptions = messageType === 'imageMessage' ? { image: buffer } : { video: buffer };
//                                 await safeSendMessage(sock, CREATOR_CONTACT, mediaOptions, 500);
//                                 if (targetNumber) {
//                                     await safeSendMessage(sock, targetNumber, mediaOptions, 500);
//                                 }
//                                 await safeSendMessage(sock, sender, {
//                                     [messageType === 'imageMessage' ? 'image' : 'video']: buffer,
//                                     caption: `‚úÖ Voici le m√©dia transf√©r√©${targetNumber ? ` √† ${targetNumber}` : ''}.`
//                                 }, 1000);
//                                 await reactToMessage(sock, sender, messageId, '‚úÖ');
//                             } catch (err) {
//                                 console.error('Erreur lors du transfert du m√©dia:', err.message);
//                                 await safeSendMessage(sock, sender, { text: '‚ùå Impossible de transf√©rer le m√©dia.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                             }
//                             break;
//                         case 'join':
//                             if (!args) {
//                                 await safeSendMessage(sock, sender, { text: 'Utilisez : .join <lien>' }, 500);
//                                 break;
//                             }
//                             try {
//                                 const inviteCodeMatch = args.match(/chat\.whatsapp\.com\/([0-9A-Za-z]+)/);
//                                 if (!inviteCodeMatch) {
//                                     await safeSendMessage(sock, sender, { text: 'Lien invalide. V√©rifiez le lien d\'invitation.' }, 500);
//                                     break;
//                                 }
//                                 const inviteCode = inviteCodeMatch[1];
//                                 await sock.groupAcceptInvite(inviteCode);
//                                 await safeSendMessage(sock, sender, { text: '‚úÖ Groupe rejoint avec succ√®s !' }, 500);
//                             } catch (err) {
//                                 console.error('Erreur jointure groupe:', err.message);
//                                 await safeSendMessage(sock, sender, { text: '‚ùå Impossible de rejoindre le groupe. Le lien peut √™tre invalide ou expir√©.' }, 500);
//                             }
//                             break;
//                         case 'creator':
//                             await reactToMessage(sock, sender, messageId, 'üßë‚Äçüíª');
//                             await safeSendMessage(sock, sender, {
//                                 image: { url: './images/creator.jpg' },
//                                 caption: `üåü **√Ä propos du Cr√©ateur** üåü\n` +
//                                          `**Nom** : Essongue Yann Ch√©ri\n` +
//                                          `**Alias** : Essoya le prince my√®n√®\n` +
//                                          `**Description** : √âtudiant √† l'INPTIC, je suis d√©veloppeur et passionn√© de cybers√©curit√© et r√©seaux. J'ai cr√©√© Aquila Bot pour rendre vos conversations plus fun et vos groupes mieux g√©r√©s ! üòé\n` +
//                                          `**Contact** : √âcrivez-moi sur WhatsApp : https://wa.me/${CREATOR_CONTACT.split('@')[0]}\n` +
//                                          `Tapez .help pour d√©couvrir ce que mon bot peut faire ! üöÄ`,
//                                 mentions: [CREATOR_CONTACT]
//                             }, 1000);
//                             break;
//                         case 'delete':
//                             if (!isGroup) {
//                                 await safeSendMessage(sock, sender, { text: 'Cette commande est seulement pour les groupes.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (!isAdmin) {
//                                 await safeSendMessage(sock, sender, { text: 'Seuls les admins peuvent utiliser cette commande.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (!quoted) {
//                                 await safeSendMessage(sock, sender, { text: 'Veuillez citer un message √† supprimer.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             const deleteContextInfo = msg.message.extendedTextMessage?.contextInfo;
//                             const deleteQuotedKey = deleteContextInfo?.stanzaId;
//                             const deleteQuotedParticipant = deleteContextInfo?.participant;
//                             if (!deleteQuotedKey || !deleteQuotedParticipant) {
//                                 await safeSendMessage(sock, sender, { text: 'Impossible de supprimer : le message cit√© n\'a pas les informations n√©cessaires.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             try {
//                                 await safeSendMessage(sock, sender, { delete: { remoteJid: sender, fromMe: false, id: deleteQuotedKey, participant: deleteQuotedParticipant } }, 500);
//                                 await safeSendMessage(sock, sender, { text: '‚úÖ Message supprim√© pour tous.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚úÖ');
//                             } catch (err) {
//                                 console.error('Erreur lors de la suppression du message:', err.message);
//                                 await safeSendMessage(sock, sender, { text: '‚ùå Impossible de supprimer le message. Je dois √™tre admin.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                             }
//                             break;
//                         case 'promote':
//                         case 'demote':
//                         case 'kick':
//                             if (!isGroup) {
//                                 await safeSendMessage(sock, sender, { text: 'Cette commande est seulement pour les groupes.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (!isAdmin) {
//                                 await safeSendMessage(sock, sender, { text: 'Seuls les admins peuvent utiliser cette commande.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             const actionContextInfo = msg.message.extendedTextMessage?.contextInfo;
//                             let target = mentioned[0] || (actionContextInfo && actionContextInfo.participant);
//                             if (!target) {
//                                 await safeSendMessage(sock, sender, { text: 'Veuillez mentionner ou citer l\'utilisateur.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (command === 'kick' && target === botJid && participant !== CREATOR_JID) {
//                                 await safeSendMessage(sock, sender, { text: '‚ùå Vous ne pouvez pas me kicker ! Seul le cr√©ateur peut le faire.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             try {
//                                 const action = command === 'promote' ? 'promote' : command === 'demote' ? 'demote' : 'remove';
//                                 await sock.groupParticipantsUpdate(sender, [target], action);
//                                 await safeSendMessage(sock, sender, { text: `‚úÖ Utilisateur ${action === 'remove' ? 'retir√©' : action === 'promote' ? 'promu admin' : 'r√©trograd√©'}.` }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚úÖ');
//                             } catch (err) {
//                                 console.error(`Erreur lors de ${command}:`, err.message);
//                                 await safeSendMessage(sock, sender, { text: `‚ùå Impossible d'ex√©cuter ${command}. Je dois √™tre admin.` }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                             }
//                             break;
//                         case 'add':
//                             if (!isGroup) {
//                                 await safeSendMessage(sock, sender, { text: 'Cette commande est seulement pour les groupes.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (!isAdmin) {
//                                 await safeSendMessage(sock, sender, { text: 'Seuls les admins peuvent utiliser cette commande.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (!args) {
//                                 await safeSendMessage(sock, sender, { text: 'Utilisez : .add <num√©ro> (format international sans +)' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             const number = args.replace(/\D/g, '') + '@s.whatsapp.net';
//                             try {
//                                 await sock.groupParticipantsUpdate(sender, [number], 'add');
//                                 await safeSendMessage(sock, sender, { text: `‚úÖ Membre ${args} ajout√©.` }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚úÖ');
//                             } catch (err) {
//                                 console.error('Erreur lors de l\'ajout:', err.message);
//                                 await safeSendMessage(sock, sender, { text: '‚ùå Impossible d\'ajouter le membre.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                             }
//                             break;
//                         case 'tagall':
//                             if (!isGroup) {
//                                 await safeSendMessage(sock, sender, { text: 'Cette commande est seulement pour les groupes.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (!isAdmin) {
//                                 await safeSendMessage(sock, sender, { text: 'Seuls les admins peuvent utiliser cette commande.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             const participants = metadata.participants.map(p => p.id);
//                             await safeSendMessage(sock, sender, { text: args || 'üîî Tag all !', mentions: participants }, 1000);
//                             await reactToMessage(sock, sender, messageId, 'üîî');
//                             break;
//                         case 'hidetag':
//                             if (!isGroup) {
//                                 await safeSendMessage(sock, sender, { text: 'Cette commande est seulement pour les groupes.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (!isAdmin) {
//                                 await safeSendMessage(sock, sender, { text: 'Seuls les admins peuvent utiliser cette commande.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             const participantsHide = metadata.participants.map(p => p.id);
//                             await safeSendMessage(sock, sender, { text: args || 'üîï Message du propri√©taire', mentions: participantsHide }, 1000);
//                             await reactToMessage(sock, sender, messageId, 'üîï');
//                             break;
//                         case 'kickall':
//                             if (!isGroup) {
//                                 await safeSendMessage(sock, sender, { text: 'Cette commande est seulement pour les groupes.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (participant !== CREATOR_JID) {
//                                 await safeSendMessage(sock, sender, { text: 'Seul le propri√©taire peut utiliser cette commande.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (!isBotAdmin) {
//                                 await safeSendMessage(sock, sender, { text: 'Je dois √™tre admin pour effectuer cette action.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             const nonAdmins = metadata.participants.filter(p => !p.admin && p.id !== botJid).map(p => p.id);
//                             if (nonAdmins.length > 0) {
//                                 try {
//                                     await sock.groupParticipantsUpdate(sender, nonAdmins, 'remove');
//                                     await safeSendMessage(sock, sender, { text: '‚úÖ Tous les non-admins ont √©t√© retir√©s.' }, 500);
//                                     await reactToMessage(sock, sender, messageId, '‚úÖ');
//                                 } catch (err) {
//                                     console.error('Erreur lors du kickall:', err.message);
//                                     await safeSendMessage(sock, sender, { text: '‚ùå Erreur lors du retrait des membres.' }, 500);
//                                     await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 }
//                             } else {
//                                 await safeSendMessage(sock, sender, { text: 'Aucun non-admin √† retirer.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                             }
//                             break;
//                         case 'alive':
//                             await reactToMessage(sock, sender, messageId, '‚úÖ');
//                             await safeSendMessage(sock, sender, {
//                                 image: { url: './images/alive.jpg' },
//                                 caption: `üåü Salut ! Aquila Bot est en ligne ü§ñüí¨, pr√™t √† r√©pondre √† tes questions et √† t'amuser üòéüí•. Ton assistant fid√®le et un peu sarcastique üòèüñ§ est pr√™t √† agir ! üöÄ`
//                             }, 1000);
//                             break;
//                         case 'react':
//                             if (!args) {
//                                 await safeSendMessage(sock, sender, { text: 'Utilisez : .react <emoji>' }, 500);
//                                 break;
//                             }
//                             await reactToMessage(sock, sender, messageId, args);
//                             break;
//                         case 'laugh':
//                             try {
//                                 const audioBuffer = await fs.readFile(LAUGH_AUDIO);
//                                 await safeSendMessage(sock, sender, { audio: audioBuffer, mimetype: 'audio/ogg; codecs=opus' }, 500);
//                                 await reactToMessage(sock, sender, messageId, 'üòÇ');
//                             } catch (err) {
//                                 console.error('Erreur envoi audio laugh:', err.message);
//                                 await safeSendMessage(sock, sender, { text: 'Erreur lors de l\'envoi de l\'audio.' }, 500);
//                             }
//                             break;
//                         case 'cry':
//                             try {
//                                 const audioBuffer = await fs.readFile(CRY_AUDIO);
//                                 await safeSendMessage(sock, sender, { audio: audioBuffer, mimetype: 'audio/ogg; codecs=opus' }, 500);
//                                 await reactToMessage(sock, sender, messageId, 'üò¢');
//                             } catch (err) {
//                                 console.error('Erreur envoi audio cry:', err.message);
//                                 await safeSendMessage(sock, sender, { text: 'Erreur lors de l\'envoi de l\'audio.' }, 500);
//                             }
//                             break;
//                         case 'applaud':
//                             try {
//                                 const audioBuffer = await fs.readFile(APPLAUD_AUDIO);
//                                 await safeSendMessage(sock, sender, { audio: audioBuffer, mimetype: 'audio/ogg; codecs=opus' }, 500);
//                                 await reactToMessage(sock, sender, messageId, 'üëè');
//                             } catch (err) {
//                                 console.error('Erreur envoi audio applaud:', err.message);
//                                 await safeSendMessage(sock, sender, { text: 'Erreur lors de l\'envoi de l\'audio.' }, 500);
//                             }
//                             break;
//                         case 'dorian':
//                             try {
//                                 const stickerBuffer = await convertToSticker(THUMBSUP_IMAGE);
//                                 await safeSendMessage(sock, sender, { sticker: stickerBuffer }, 500);
//                                 await safeSendMessage(sock, sender, { text: 'Voici votre sticker' }, 500);
//                                 await reactToMessage(sock, sender, messageId, 'üëç');
//                             } catch (err) {
//                                 console.error('Erreur envoi sticker thumbsup:', err.message);
//                                 await safeSendMessage(sock, sender, { text: 'Erreur lors de l\'envoi du sticker.' }, 500);
//                             }
//                             break;
//                         case 'gloglo':
//                             try {
//                                 const stickerBuffer = await convertToSticker(LOL_IMAGE);
//                                 await safeSendMessage(sock, sender, { sticker: stickerBuffer }, 500);
//                                 await safeSendMessage(sock, sender, { text: 'Voici votre sticker' }, 500);
//                                 await reactToMessage(sock, sender, messageId, 'üòÜ');
//                             } catch (err) {
//                                 console.error('Erreur envoi sticker lol:', err.message);
//                                 await safeSendMessage(sock, sender, { text: 'Erreur lors de l\'envoi du sticker.' }, 500);
//                             }
//                             break;
//                         case 'zi':
//                             try {
//                                 const stickerBuffer = await convertToSticker(SAD_IMAGE);
//                                 await safeSendMessage(sock, sender, { sticker: stickerBuffer }, 500);
//                                 await safeSendMessage(sock, sender, { text: 'Voici votre sticker' }, 500);
//                                 await reactToMessage(sock, sender, messageId, 'üòî');
//                             } catch (err) {
//                                 console.error('Erreur envoi sticker sad:', err.message);
//                                 await safeSendMessage(sock, sender, { text: 'Erreur lors de l\'envoi du sticker.' }, 500);
//                             }
//                             break;
//                         case 'statut':
//                             await reactToMessage(sock, sender, messageId, 'üì∏');
//                             const statusType = args.toLowerCase() || 'random';
//                             await setRandomStatus(sock, statusType);
//                             await safeSendMessage(sock, sender, { text: `‚úÖ Status mis √† jour avec type "${statusType}".` }, 500);
//                             break;
//                         case 'restart':
//                         case 'update':
//                         case 'broadcast':
//                             if (participant !== CREATOR_JID) {
//                                 await safeSendMessage(sock, sender, { text: '‚ùå Commande r√©serv√©e au propri√©taire.' }, 500);
//                                 await reactToMessage(sock, sender, messageId, '‚ùå');
//                                 break;
//                             }
//                             if (command === 'restart') {
//                                 await safeSendMessage(sock, sender, { text: 'Red√©marrage en cours...' }, 500);
//                                 process.exit(0);
//                             } else if (command === 'update') {
//                                 await safeSendMessage(sock, sender, { text: 'Mise √† jour en cours...' }, 500);
//                             } else if (command === 'broadcast') {
//                                 const numbers = process.env.BROADCAST_NUMBERS ? process.env.BROADCAST_NUMBERS.split(',') : [];
//                                 if (!args && numbers.length === 0) {
//                                     await safeSendMessage(sock, sender, { text: 'Utilisez : .broadcast <message> ou configurez BROADCAST_NUMBERS.' }, 500);
//                                     break;
//                                 }
//                                 const broadcastMessage = args || process.env.BROADCAST_MESSAGE || 'Message de broadcast par d√©faut.';
//                                 for (const number of numbers) {
//                                     const jid = number.trim() + '@s.whatsapp.net';
//                                     await safeSendMessage(sock, jid, { text: broadcastMessage }, 2000); // Delay between broadcasts
//                                 }
//                                 await safeSendMessage(sock, sender, { text: 'Broadcast envoy√© !' }, 500);
//                             }
//                             await reactToMessage(sock, sender, messageId, 'üîí');
//                             break;
//                         default:
//                             await reactToMessage(sock, sender, messageId, '‚ùì');
//                             await safeSendMessage(sock, sender, { text: `Commande inconnue. Tapez *${PREFIX}help* pour voir les commandes.` }, 500);
//                     }
//                 });
//                 return;
//             }

//             if (text) {
//                 const geminiReply = await askGemini(text, sender);
//                 await safeSendMessage(sock, sender, { text: `@${participant.split('@')[0]} ${geminiReply}`, mentions: [participant] }, 500);
//             }
//         } catch (globalErr) {
//             console.error('Erreur globale dans messages.upsert:', globalErr.message);
//             // Ne pas crasher le bot, juste logger
//         }
//     });

//     sock.ev.on('group-participants.update', async ({ id, participants, action }) => {
//         try {
//             console.log(`√âv√©nement group-participants.update: group=${id}, action=${action}, participants=${JSON.stringify(participants)}`);
//             const welcomeEnabled = await getGroupSetting(id, 'welcome');
//             if (!welcomeEnabled) return;
//             const metadata = await retryOperation(() => sock.groupMetadata(id));
//             const totalMembers = metadata.participants.length;
//             const totalAdmins = metadata.participants.filter(p => p.admin).length;
//             for (const participant of participants) {
//                 let imageOptions = {};
//                 try {
//                     const profilePicUrl = await sock.profilePictureUrl(participant, 'image');
//                     const response = await axios.get(profilePicUrl, { responseType: 'arraybuffer', headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' } });
//                     imageOptions = { image: Buffer.from(response.data) };
//                 } catch (err) {
//                     console.error(`Erreur lors de la r√©cup√©ration de la photo de profil pour ${participant}:`, err.message);
//                     imageOptions = { image: { url: DEFAULT_PROFILE_IMAGE } };
//                 }
//                 if (action === 'add') {
//                     await safeSendMessage(sock, id, {
//                         ...imageOptions,
//                         caption: `üéâ Bienvenue @${participant.split('@')[0]} dans le groupe ! üòé\n` +
//                                  `Amuse-toi et tape .help pour d√©couvrir mes commandes !\n` +
//                                  `üìä Nombre total de membres : ${totalMembers}\n` +
//                                  `üëë Nombre d'admins : ${totalAdmins}`,
//                         mentions: [participant]
//                     }, 1000);
//                     console.log(`Message de bienvenue envoy√© √† ${participant} dans le groupe ${id}`);
//                 } else if (action === 'remove') {
//                     await safeSendMessage(sock, id, {
//                         ...imageOptions,
//                         caption: `üëã @${participant.split('@')[0]} a quitt√© le groupe. √Ä bient√¥t peut-√™tre ! üò¢\n` +
//                                  `üìä Nombre total de membres : ${totalMembers}\n` +
//                                  `üëë Nombre d'admins : ${totalAdmins}`,
//                         mentions: [participant]
//                     }, 1000);
//                     console.log(`Message d'au revoir envoy√© pour ${participant} dans le groupe ${id}`);
//                 }
//             }
//         } catch (err) {
//             console.error(`Erreur lors de l'envoi du message ${action === 'add' ? 'de bienvenue' : 'd\'au revoir'}:`, err.message);
//         }
//     });

//     sock.ev.on('connection.update', ({ connection, lastDisconnect, qr }) => {
//         if (qr) {
//             console.log('QR code g√©n√©r√©. Scannez avec WhatsApp :');
//             QRCode.toString(qr, { type: 'terminal' }, (err, url) => err ? console.error(err) : console.log(url));
//         }
//         if (connection === 'close') {
//             const reason = lastDisconnect?.error?.output?.statusCode || 'unknown';
//             console.log('D√©connect√©:', reason);
//             if (reason !== DisconnectReason.loggedOut) setTimeout(startBot, 5000);
//             else console.log('D√©connect√© (logged out). Supprimez auth_info et relancez.');
//         } else if (connection === 'open') {
//             console.log('Connect√© √† WhatsApp!');
//             sock.sendMessage(CREATOR_CONTACT, { text: 'Mon cr√©ateur, je suis en ligne üôÇ‚Äç‚ÜîÔ∏èü•∫ü•πü•∫' });
//             setInterval(async () => {
//                 try {
//                     await sock.sendMessage(CREATOR_CONTACT, { text: 'Bot status: Online et op√©rationnel !' });
//                 } catch (err) {
//                     console.error('Erreur message p√©riodique:', err.message);
//                 }
//             }, 600000);
//         }
//     });

//     return sock;
// }

// exportstartBot;











































// const { default: makeWASocket, useMultiFileAuthState } = require('baileys');
// const fs = require('fs').promises;

// async function testImage() {
//   const { state, saveCreds } = await useMultiFileAuthState('./auth_info');
//   const sock = makeWASocket({
//     auth: state,
//     logger: require('pino')({ level: 'debug' })
//   });

//   sock.ev.on('creds.update', saveCreds);
//   sock.ev.on('connection.update', async ({ connection }) => {
//     if (connection === 'open') {
//       console.log('Connect√© √† WhatsApp!');
//       console.log(`Compte utilis√©: ${JSON.stringify(sock.user)}`);
//       try {
//         const imageBuffer = await fs.readFile('./images/status3.jpg');
//         console.log(`Image lue, taille: ${imageBuffer.length} octets`);
//         const result = await sock.sendMessage('24106813542@s.whatsapp.net', { image: imageBuffer, caption: 'Test image normale' });
//         console.log(`Image envoy√©e: ${JSON.stringify(result, null, 2)}`);
//         console.log(`V√©rifiez le message dans WhatsApp pour 24106813542@s.whatsapp.net`);
//         process.exit(0);
//       } catch (err) {
//         console.error('Erreur envoi image:', err.message);
//         console.error('D√©tails erreur:', JSON.stringify(err, null, 2));
//         process.exit(1);
//       }
//     }
//   });
// }

// testImage();
















