

// const axios = require('axios');
// const fs = require('fs').promises;
// const path = require('path');

// async function downloadTikTok(sock, sender, url) {
//     try {
//         // Envoyer un message pour indiquer que le t√©l√©chargement commence
//         await sock.sendMessage(sender, { text: 'üì• T√©l√©chargement de la vid√©o TikTok en cours, veuillez patienter...' });

//         // Effectuer la requ√™te POST vers l'API tikwm.com
//         const response = await axios.post('https://tikwm.com/api/', {
//             url: url
//         }, {
//             headers: {
//                 'Content-Type': 'application/json',
//                 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
//             }
//         });

//         // V√©rifier si la r√©ponse est valide
//         const data = response.data;
//         if (!data || !data.data) {
//             throw new Error('R√©ponse API invalide : aucune donn√©e re√ßue.');
//         }

//         // R√©cup√©rer l'URL de la vid√©o (hdplay, play ou wmplay)
//         const videoUrl = data.data.hdplay || data.data.play || data.data.wmplay;
//         if (!videoUrl) {
//             throw new Error('Aucune URL de vid√©o disponible dans la r√©ponse.');
//         }

//         // T√©l√©charger la vid√©o
//         const videoResponse = await axios.get(videoUrl, {
//             responseType: 'arraybuffer',
//             headers: {
//                 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
//             }
//         });

//         // Cr√©er un fichier temporaire pour la vid√©o
//         const tempDir = './temp';
//         await fs.mkdir(tempDir, { recursive: true });
//         const tempFilePath = path.join(tempDir, `tiktok_${Date.now()}.mp4`);
//         await fs.writeFile(tempFilePath, videoResponse.data);

//         // V√©rifier la taille du fichier (WhatsApp limite √† ~16 Mo pour les vid√©os)
//         const stats = await fs.stat(tempFilePath);
//         if (stats.size > 16 * 1024 * 1024) {
//             await fs.unlink(tempFilePath);
//             throw new Error('La vid√©o est trop volumineuse pour WhatsApp (>16 Mo).');
//         }

//         // Envoyer la vid√©o au chat
//         await sock.sendMessage(sender, {
//             video: { url: tempFilePath },
//             mimetype: 'video/mp4',
//             caption: 'üé• Vid√©o TikTok t√©l√©charg√©e avec succ√®s !'
//         });

//         // Nettoyer le fichier temporaire
//         await fs.unlink(tempFilePath);

//         // Ajouter une r√©action de confirmation
//         await sock.sendMessage(sender, { react: { text: '‚úÖ', key: { id: sender, remoteJid: sender, fromMe: false } } });
//     } catch (err) {
//         console.error('Erreur lors du t√©l√©chargement TikTok:', err.message);
//         await sock.sendMessage(sender, { text: `‚ùå Erreur lors du t√©l√©chargement de la vid√©o TikTok : ${err.message}` });
//         await sock.sendMessage(sender, { react: { text: '‚ùå', key: { id: sender, remoteJid: sender, fromMe: false } } });
//     }
// }

// export{ downloadTikTok };








import axios from 'axios';
import fs from 'fs/promises';
import path from 'path';

async function downloadTikTok(sock, sender, url) {
    try {
        // Envoyer un message pour indiquer que le t√©l√©chargement commence
        await sock.sendMessage(sender, { text: 'üì• T√©l√©chargement de la vid√©o TikTok en cours, veuillez patienter...' });

        // Effectuer la requ√™te POST vers l'API tikwm.com
        const response = await axios.post('https://tikwm.com/api/', {
            url: url
        }, {
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
        });

        // V√©rifier si la r√©ponse est valide
        const data = response.data;
        if (!data || !data.data) {
            throw new Error('R√©ponse API invalide : aucune donn√©e re√ßue.');
        }

        // R√©cup√©rer les informations de la vid√©o
        const videoData = data.data;
        const videoUrl = videoData.hdplay || videoData.play || videoData.wmplay;
        if (!videoUrl) {
            throw new Error('Aucune URL de vid√©o disponible dans la r√©ponse.');
        }

        // Formater les informations pour la l√©gende
        const formatDuration = (seconds) => {
            const minutes = Math.floor(seconds / 60);
            const secs = seconds % 60;
            return `${minutes}:${secs.toString().padStart(2, '0')}`;
        };

        const caption = `üé• **Vid√©o TikTok t√©l√©charg√©e avec succ√®s !** üéâ\n` +
                       `üë§ **Auteur** : ${videoData.author?.nickname || 'Inconnu'} (@${videoData.author?.unique_id || 'N/A'})\n` +
                       `üìù **Description** : ${videoData.title || 'Aucune description'}\n` +
                       `‚è±Ô∏è **Dur√©e** : ${videoData.duration ? formatDuration(videoData.duration) : 'N/A'}\n` +
                       `üëÄ **Vues** : ${videoData.play_count?.toLocaleString() || 'N/A'}\n` +
                       `‚ù§Ô∏è **Likes** : ${videoData.digg_count?.toLocaleString() || 'N/A'}\n` +
                       `üí¨ **Commentaires** : ${videoData.comment_count?.toLocaleString() || 'N/A'}\n` +
                       `üîÑ **Partages** : ${videoData.share_count?.toLocaleString() || 'N/A'}\n` +
                       `üéµ **Musique** : ${videoData.music_info?.title || 'Aucune musique'} (par ${videoData.music_info?.author || 'N/A'})\n` +
                       `üîó **Lien original** : ${url}`;

        // T√©l√©charger la vid√©o
        const videoResponse = await axios.get(videoUrl, {
            responseType: 'arraybuffer',
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });

        // Cr√©er un fichier temporaire pour la vid√©o
        const tempDir = './temp';
        await fs.mkdir(tempDir, { recursive: true });
        const tempFilePath = path.join(tempDir, `tiktok_${Date.now()}.mp4`);
        await fs.writeFile(tempFilePath, videoResponse.data);

        // V√©rifier la taille du fichier (WhatsApp limite √† ~16 Mo pour les vid√©os)
        const stats = await fs.stat(tempFilePath);
        if (stats.size > 16 * 1024 * 1024) {
            await fs.unlink(tempFilePath);
            throw new Error('La vid√©o est trop volumineuse pour WhatsApp (>16 Mo).');
        }

        // Envoyer la vid√©o avec les informations dans la l√©gende
        await sock.sendMessage(sender, {
            video: { url: tempFilePath },
            mimetype: 'video/mp4',
            caption: caption
        });

        // Envoyer l'avatar de l'auteur si disponible
        if (videoData.author?.avatar) {
            try {
                const avatarResponse = await axios.get(videoData.author.avatar, {
                    responseType: 'arraybuffer',
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                    }
                });
                await sock.sendMessage(sender, {
                    image: Buffer.from(avatarResponse.data),
                    caption: `üñºÔ∏è Photo de profil de @${videoData.author.unique_id || 'N/A'}`
                });
            } catch (err) {
                console.error('Erreur lors du t√©l√©chargement de l\'avatar:', err.message);
                await sock.sendMessage(sender, { text: '‚ö†Ô∏è Impossible de t√©l√©charger la photo de profil de l\'auteur.' });
            }
        }

        // Nettoyer le fichier temporaire
        await fs.unlink(tempFilePath);

        // Ajouter une r√©action de confirmation
        await sock.sendMessage(sender, { react: { text: '‚úÖ', key: { id: sender, remoteJid: sender, fromMe: false } } });
    } catch (err) {
        console.error('Erreur lors du t√©l√©chargement TikTok:', err.message);
        await sock.sendMessage(sender, { text: `‚ùå Erreur lors du t√©l√©chargement de la vid√©o TikTok : ${err.message}` });
        await sock.sendMessage(sender, { react: { text: '‚ùå', key: { id: sender, remoteJid: sender, fromMe: false } } });
    }
}

export{ downloadTikTok };